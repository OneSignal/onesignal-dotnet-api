/*
 * OneSignal
 *
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: devrel@onesignal.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OneSignalApi.Client;
using OneSignalApi.Model;

namespace OneSignalApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Start Live Activity
        /// </summary>
        /// <remarks>
        /// Starts a Live Activity
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="beginLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void BeginLiveActivity(string appId, string activityId, BeginLiveActivityRequest beginLiveActivityRequest, int operationIndex = 0);

        /// <summary>
        /// Start Live Activity
        /// </summary>
        /// <remarks>
        /// Starts a Live Activity
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="beginLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BeginLiveActivityWithHttpInfo(string appId, string activityId, BeginLiveActivityRequest beginLiveActivityRequest, int operationIndex = 0);
        /// <summary>
        /// Stop a scheduled or currently outgoing notification
        /// </summary>
        /// <remarks>
        /// Used to stop a scheduled or currently outgoing notification
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelNotificationSuccessResponse</returns>
        CancelNotificationSuccessResponse CancelNotification(string appId, string notificationId, int operationIndex = 0);

        /// <summary>
        /// Stop a scheduled or currently outgoing notification
        /// </summary>
        /// <remarks>
        /// Used to stop a scheduled or currently outgoing notification
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelNotificationSuccessResponse</returns>
        ApiResponse<CancelNotificationSuccessResponse> CancelNotificationWithHttpInfo(string appId, string notificationId, int operationIndex = 0);
        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// Creates a new OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>App</returns>
        App CreateApp(App app, int operationIndex = 0);

        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// Creates a new OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of App</returns>
        ApiResponse<App> CreateAppWithHttpInfo(App app, int operationIndex = 0);
        /// <summary>
        /// Create notification
        /// </summary>
        /// <remarks>
        /// Sends notifications to your users 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateNotificationSuccessResponse</returns>
        CreateNotificationSuccessResponse CreateNotification(Notification notification, int operationIndex = 0);

        /// <summary>
        /// Create notification
        /// </summary>
        /// <remarks>
        /// Sends notifications to your users 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateNotificationSuccessResponse</returns>
        ApiResponse<CreateNotificationSuccessResponse> CreateNotificationWithHttpInfo(Notification notification, int operationIndex = 0);
        /// <summary>
        /// Add a device
        /// </summary>
        /// <remarks>
        /// Register a new device to one of your OneSignal apps &amp;#x1F6A7; Don&#39;t use this This API endpoint is designed to be used from our open source Mobile and Web Push SDKs. It is not designed for developers to use it directly, unless instructed to do so by OneSignal support. If you use this method instead of our SDKs, many OneSignal features such as conversion tracking, timezone tracking, language detection, and rich-push won&#39;t work out of the box. It will also make it harder to identify possible setup issues. This method is used to register a new device with OneSignal. If a device is already registered with the specified identifier, then this will update the existing device record instead of creating a new one. The returned player is a player / user ID. Use the returned ID to send push notifications to this specific user later, or to include this player when sending to a set of users. &amp;#x1F6A7; iOS Must set test_type to 1 when building your iOS app as development. Omit this field in your production app builds. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePlayerSuccessResponse</returns>
        CreatePlayerSuccessResponse CreatePlayer(Player player, int operationIndex = 0);

        /// <summary>
        /// Add a device
        /// </summary>
        /// <remarks>
        /// Register a new device to one of your OneSignal apps &amp;#x1F6A7; Don&#39;t use this This API endpoint is designed to be used from our open source Mobile and Web Push SDKs. It is not designed for developers to use it directly, unless instructed to do so by OneSignal support. If you use this method instead of our SDKs, many OneSignal features such as conversion tracking, timezone tracking, language detection, and rich-push won&#39;t work out of the box. It will also make it harder to identify possible setup issues. This method is used to register a new device with OneSignal. If a device is already registered with the specified identifier, then this will update the existing device record instead of creating a new one. The returned player is a player / user ID. Use the returned ID to send push notifications to this specific user later, or to include this player when sending to a set of users. &amp;#x1F6A7; iOS Must set test_type to 1 when building your iOS app as development. Omit this field in your production app builds. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePlayerSuccessResponse</returns>
        ApiResponse<CreatePlayerSuccessResponse> CreatePlayerWithHttpInfo(Player player, int operationIndex = 0);
        /// <summary>
        /// Create Segments
        /// </summary>
        /// <remarks>
        /// Create segments visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segments endpoint and re-create it with this endpoint to edit. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSegmentSuccessResponse</returns>
        CreateSegmentSuccessResponse CreateSegments(string appId, Segment segment = default(Segment), int operationIndex = 0);

        /// <summary>
        /// Create Segments
        /// </summary>
        /// <remarks>
        /// Create segments visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segments endpoint and re-create it with this endpoint to edit. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSegmentSuccessResponse</returns>
        ApiResponse<CreateSegmentSuccessResponse> CreateSegmentsWithHttpInfo(string appId, Segment segment = default(Segment), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="createSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 CreateSubscription(string appId, string aliasLabel, string aliasId, CreateSubscriptionRequestBody createSubscriptionRequestBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="createSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> CreateSubscriptionWithHttpInfo(string appId, string aliasLabel, string aliasId, CreateSubscriptionRequestBody createSubscriptionRequestBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User CreateUser(string appId, User user, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> CreateUserWithHttpInfo(string appId, User user, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an alias by alias label
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 DeleteAlias(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an alias by alias label
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> DeleteAliasWithHttpInfo(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0);
        /// <summary>
        /// Delete a user record
        /// </summary>
        /// <remarks>
        /// Delete player - Required: Used to delete a single, specific Player ID record from a specific OneSignal app. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="playerId">The OneSignal player_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeletePlayerSuccessResponse</returns>
        DeletePlayerSuccessResponse DeletePlayer(string appId, string playerId, int operationIndex = 0);

        /// <summary>
        /// Delete a user record
        /// </summary>
        /// <remarks>
        /// Delete player - Required: Used to delete a single, specific Player ID record from a specific OneSignal app. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="playerId">The OneSignal player_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeletePlayerSuccessResponse</returns>
        ApiResponse<DeletePlayerSuccessResponse> DeletePlayerWithHttpInfo(string appId, string playerId, int operationIndex = 0);
        /// <summary>
        /// Delete Segments
        /// </summary>
        /// <remarks>
        /// Delete segments (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteSegmentSuccessResponse</returns>
        DeleteSegmentSuccessResponse DeleteSegments(string appId, string segmentId, int operationIndex = 0);

        /// <summary>
        /// Delete Segments
        /// </summary>
        /// <remarks>
        /// Delete segments (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteSegmentSuccessResponse</returns>
        ApiResponse<DeleteSegmentSuccessResponse> DeleteSegmentsWithHttpInfo(string appId, string segmentId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the Subscription.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteSubscription(string appId, string subscriptionId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the Subscription.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubscriptionWithHttpInfo(string appId, string subscriptionId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteUser(string appId, string aliasLabel, string aliasId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo(string appId, string aliasLabel, string aliasId, int operationIndex = 0);
        /// <summary>
        /// Stop Live Activity
        /// </summary>
        /// <remarks>
        /// Stops a Live Activity
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void EndLiveActivity(string appId, string activityId, string subscriptionId, int operationIndex = 0);

        /// <summary>
        /// Stop Live Activity
        /// </summary>
        /// <remarks>
        /// Stops a Live Activity
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EndLiveActivityWithHttpInfo(string appId, string activityId, string subscriptionId, int operationIndex = 0);
        /// <summary>
        /// Export CSV of Events
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportEventsSuccessResponse</returns>
        ExportEventsSuccessResponse ExportEvents(string notificationId, string appId, int operationIndex = 0);

        /// <summary>
        /// Export CSV of Events
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportEventsSuccessResponse</returns>
        ApiResponse<ExportEventsSuccessResponse> ExportEventsWithHttpInfo(string notificationId, string appId, int operationIndex = 0);
        /// <summary>
        /// Export CSV of Players
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportPlayersRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportPlayersSuccessResponse</returns>
        ExportPlayersSuccessResponse ExportPlayers(string appId, ExportPlayersRequestBody exportPlayersRequestBody = default(ExportPlayersRequestBody), int operationIndex = 0);

        /// <summary>
        /// Export CSV of Players
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportPlayersRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportPlayersSuccessResponse</returns>
        ApiResponse<ExportPlayersSuccessResponse> ExportPlayersWithHttpInfo(string appId, ExportPlayersRequestBody exportPlayersRequestBody = default(ExportPlayersRequestBody), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityResponse</returns>
        UserIdentityResponse FetchAliases(string appId, string subscriptionId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityResponse</returns>
        ApiResponse<UserIdentityResponse> FetchAliasesWithHttpInfo(string appId, string subscriptionId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the User’s properties, Aliases, and Subscriptions.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User FetchUser(string appId, string aliasLabel, string aliasId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the User’s properties, Aliases, and Subscriptions.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> FetchUserWithHttpInfo(string appId, string aliasLabel, string aliasId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 FetchUserIdentity(string appId, string aliasLabel, string aliasId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> FetchUserIdentityWithHttpInfo(string appId, string aliasLabel, string aliasId, int operationIndex = 0);
        /// <summary>
        /// View an app
        /// </summary>
        /// <remarks>
        /// View the details of a single OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>App</returns>
        App GetApp(string appId, int operationIndex = 0);

        /// <summary>
        /// View an app
        /// </summary>
        /// <remarks>
        /// View the details of a single OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of App</returns>
        ApiResponse<App> GetAppWithHttpInfo(string appId, int operationIndex = 0);
        /// <summary>
        /// View apps
        /// </summary>
        /// <remarks>
        /// View the details of all of your current OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;App&gt;</returns>
        List<App> GetApps(int operationIndex = 0);

        /// <summary>
        /// View apps
        /// </summary>
        /// <remarks>
        /// View the details of all of your current OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;App&gt;</returns>
        ApiResponse<List<App>> GetAppsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Manifest of In-App Messages the Subscription is eligible to display by the SDK.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetEligibleIams(string appId, string subscriptionId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Manifest of In-App Messages the Subscription is eligible to display by the SDK.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetEligibleIamsWithHttpInfo(string appId, string subscriptionId, int operationIndex = 0);
        /// <summary>
        /// View notification
        /// </summary>
        /// <remarks>
        /// View the details of a single notification and outcomes associated with it
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationWithMeta</returns>
        NotificationWithMeta GetNotification(string appId, string notificationId, int operationIndex = 0);

        /// <summary>
        /// View notification
        /// </summary>
        /// <remarks>
        /// View the details of a single notification and outcomes associated with it
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationWithMeta</returns>
        ApiResponse<NotificationWithMeta> GetNotificationWithHttpInfo(string appId, string notificationId, int operationIndex = 0);
        /// <summary>
        /// Notification History
        /// </summary>
        /// <remarks>
        /// -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationHistorySuccessResponse</returns>
        NotificationHistorySuccessResponse GetNotificationHistory(string notificationId, GetNotificationRequestBody getNotificationRequestBody, int operationIndex = 0);

        /// <summary>
        /// Notification History
        /// </summary>
        /// <remarks>
        /// -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationHistorySuccessResponse</returns>
        ApiResponse<NotificationHistorySuccessResponse> GetNotificationHistoryWithHttpInfo(string notificationId, GetNotificationRequestBody getNotificationRequestBody, int operationIndex = 0);
        /// <summary>
        /// View notifications
        /// </summary>
        /// <remarks>
        /// View the details of multiple notifications
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationSlice</returns>
        NotificationSlice GetNotifications(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0);

        /// <summary>
        /// View notifications
        /// </summary>
        /// <remarks>
        /// View the details of multiple notifications
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationSlice</returns>
        ApiResponse<NotificationSlice> GetNotificationsWithHttpInfo(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0);
        /// <summary>
        /// View Outcomes
        /// </summary>
        /// <remarks>
        /// View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutcomesData</returns>
        OutcomesData GetOutcomes(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0);

        /// <summary>
        /// View Outcomes
        /// </summary>
        /// <remarks>
        /// View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutcomesData</returns>
        ApiResponse<OutcomesData> GetOutcomesWithHttpInfo(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0);
        /// <summary>
        /// View device
        /// </summary>
        /// <remarks>
        /// View the details of an existing device in one of your OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Your app_id for this device</param>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="emailAuthHash">Email - Only required if you have enabled Identity Verification and device_type is email (11). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Player</returns>
        Player GetPlayer(string appId, string playerId, string emailAuthHash = default(string), int operationIndex = 0);

        /// <summary>
        /// View device
        /// </summary>
        /// <remarks>
        /// View the details of an existing device in one of your OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Your app_id for this device</param>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="emailAuthHash">Email - Only required if you have enabled Identity Verification and device_type is email (11). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Player</returns>
        ApiResponse<Player> GetPlayerWithHttpInfo(string appId, string playerId, string emailAuthHash = default(string), int operationIndex = 0);
        /// <summary>
        /// View devices
        /// </summary>
        /// <remarks>
        /// View the details of multiple devices in one of your OneSignal apps Unavailable for Apps Over 80,000 Users For performance reasons, this method is not available for larger apps. Larger apps should use the CSV export API endpoint, which is much more performant. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view players from</param>
        /// <param name="limit">How many devices to return. Max is 300. Default is 300 (optional)</param>
        /// <param name="offset">Result offset. Default is 0. Results are sorted by id; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlayerSlice</returns>
        PlayerSlice GetPlayers(string appId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);

        /// <summary>
        /// View devices
        /// </summary>
        /// <remarks>
        /// View the details of multiple devices in one of your OneSignal apps Unavailable for Apps Over 80,000 Users For performance reasons, this method is not available for larger apps. Larger apps should use the CSV export API endpoint, which is much more performant. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view players from</param>
        /// <param name="limit">How many devices to return. Max is 300. Default is 300 (optional)</param>
        /// <param name="offset">Result offset. Default is 0. Results are sorted by id; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlayerSlice</returns>
        ApiResponse<PlayerSlice> GetPlayersWithHttpInfo(string appId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 IdentifyUserByAlias(string appId, string aliasLabel, string aliasId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> IdentifyUserByAliasWithHttpInfo(string appId, string aliasLabel, string aliasId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityResponse</returns>
        UserIdentityResponse IdentifyUserBySubscriptionId(string appId, string subscriptionId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityResponse</returns>
        ApiResponse<UserIdentityResponse> IdentifyUserBySubscriptionIdWithHttpInfo(string appId, string subscriptionId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers this Subscription to the User identified by the identity in the payload.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityResponse</returns>
        UserIdentityResponse TransferSubscription(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers this Subscription to the User identified by the identity in the payload.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityResponse</returns>
        ApiResponse<UserIdentityResponse> TransferSubscriptionWithHttpInfo(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0);
        /// <summary>
        /// Update an app
        /// </summary>
        /// <remarks>
        /// Updates the name or configuration settings of an existing OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>App</returns>
        App UpdateApp(string appId, App app, int operationIndex = 0);

        /// <summary>
        /// Update an app
        /// </summary>
        /// <remarks>
        /// Updates the name or configuration settings of an existing OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of App</returns>
        ApiResponse<App> UpdateAppWithHttpInfo(string appId, App app, int operationIndex = 0);
        /// <summary>
        /// Update a Live Activity via Push
        /// </summary>
        /// <remarks>
        /// Updates a specified live activity.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateLiveActivitySuccessResponse</returns>
        UpdateLiveActivitySuccessResponse UpdateLiveActivity(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0);

        /// <summary>
        /// Update a Live Activity via Push
        /// </summary>
        /// <remarks>
        /// Updates a specified live activity.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateLiveActivitySuccessResponse</returns>
        ApiResponse<UpdateLiveActivitySuccessResponse> UpdateLiveActivityWithHttpInfo(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0);
        /// <summary>
        /// Edit device
        /// </summary>
        /// <remarks>
        /// Update an existing device in one of your OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatePlayerSuccessResponse</returns>
        UpdatePlayerSuccessResponse UpdatePlayer(string playerId, Player player, int operationIndex = 0);

        /// <summary>
        /// Edit device
        /// </summary>
        /// <remarks>
        /// Update an existing device in one of your OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatePlayerSuccessResponse</returns>
        ApiResponse<UpdatePlayerSuccessResponse> UpdatePlayerWithHttpInfo(string playerId, Player player, int operationIndex = 0);
        /// <summary>
        /// Edit tags with external user id
        /// </summary>
        /// <remarks>
        /// Update an existing device&#39;s tags in one of your OneSignal apps using the External User ID. Warning - Android SDK Data Synchronization Tags added through the Android SDK tagging methods may not update if using the API to change or update the same tag. For example, if you use SDK method sendTag(\&quot;key\&quot;, \&quot;value1\&quot;) then update the tag value to \&quot;value2\&quot; with this API endpoint. You will not be able to set the value back to \&quot;value1\&quot; through the SDK, you will need to change it to something different through the SDK to be reset. Recommendations if using this Endpoint on Android Mobile Apps: 1 - Do not use the same tag keys for SDK and API updates 2 - If you want to use the same key for both SDK and API updates, call the SDK getTags method first to update the device&#39;s tags. This is only applicable on the Android Mobile App SDKs. &amp;#128216; Deleting Tags To delete a tag, include its key and set its value to blank. Omitting a key/value will not delete it. For example, if I wanted to delete two existing tags rank and category while simultaneously adding a new tag class, the tags JSON would look like the following: \&quot;tags\&quot;: {    \&quot;rank\&quot;: \&quot;\&quot;,    \&quot;category\&quot;: \&quot;\&quot;,    \&quot;class\&quot;: \&quot;my_new_value\&quot; } 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID the user record is found under.</param>
        /// <param name="externalUserId">The External User ID mapped to teh device record in OneSignal.  Must be actively set on the device to be updated.</param>
        /// <param name="updatePlayerTagsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatePlayerTagsSuccessResponse</returns>
        UpdatePlayerTagsSuccessResponse UpdatePlayerTags(string appId, string externalUserId, UpdatePlayerTagsRequestBody updatePlayerTagsRequestBody = default(UpdatePlayerTagsRequestBody), int operationIndex = 0);

        /// <summary>
        /// Edit tags with external user id
        /// </summary>
        /// <remarks>
        /// Update an existing device&#39;s tags in one of your OneSignal apps using the External User ID. Warning - Android SDK Data Synchronization Tags added through the Android SDK tagging methods may not update if using the API to change or update the same tag. For example, if you use SDK method sendTag(\&quot;key\&quot;, \&quot;value1\&quot;) then update the tag value to \&quot;value2\&quot; with this API endpoint. You will not be able to set the value back to \&quot;value1\&quot; through the SDK, you will need to change it to something different through the SDK to be reset. Recommendations if using this Endpoint on Android Mobile Apps: 1 - Do not use the same tag keys for SDK and API updates 2 - If you want to use the same key for both SDK and API updates, call the SDK getTags method first to update the device&#39;s tags. This is only applicable on the Android Mobile App SDKs. &amp;#128216; Deleting Tags To delete a tag, include its key and set its value to blank. Omitting a key/value will not delete it. For example, if I wanted to delete two existing tags rank and category while simultaneously adding a new tag class, the tags JSON would look like the following: \&quot;tags\&quot;: {    \&quot;rank\&quot;: \&quot;\&quot;,    \&quot;category\&quot;: \&quot;\&quot;,    \&quot;class\&quot;: \&quot;my_new_value\&quot; } 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID the user record is found under.</param>
        /// <param name="externalUserId">The External User ID mapped to teh device record in OneSignal.  Must be actively set on the device to be updated.</param>
        /// <param name="updatePlayerTagsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatePlayerTagsSuccessResponse</returns>
        ApiResponse<UpdatePlayerTagsSuccessResponse> UpdatePlayerTagsWithHttpInfo(string appId, string externalUserId, UpdatePlayerTagsRequestBody updatePlayerTagsRequestBody = default(UpdatePlayerTagsRequestBody), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing Subscription’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateSubscription(string appId, string subscriptionId, UpdateSubscriptionRequestBody updateSubscriptionRequestBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing Subscription’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSubscriptionWithHttpInfo(string appId, string subscriptionId, UpdateSubscriptionRequestBody updateSubscriptionRequestBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing User’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineResponse202</returns>
        InlineResponse202 UpdateUser(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing User’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        ApiResponse<InlineResponse202> UpdateUserWithHttpInfo(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Start Live Activity
        /// </summary>
        /// <remarks>
        /// Starts a Live Activity
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="beginLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BeginLiveActivityAsync(string appId, string activityId, BeginLiveActivityRequest beginLiveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Start Live Activity
        /// </summary>
        /// <remarks>
        /// Starts a Live Activity
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="beginLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BeginLiveActivityWithHttpInfoAsync(string appId, string activityId, BeginLiveActivityRequest beginLiveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stop a scheduled or currently outgoing notification
        /// </summary>
        /// <remarks>
        /// Used to stop a scheduled or currently outgoing notification
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelNotificationSuccessResponse</returns>
        System.Threading.Tasks.Task<CancelNotificationSuccessResponse> CancelNotificationAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stop a scheduled or currently outgoing notification
        /// </summary>
        /// <remarks>
        /// Used to stop a scheduled or currently outgoing notification
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelNotificationSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CancelNotificationSuccessResponse>> CancelNotificationWithHttpInfoAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// Creates a new OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        System.Threading.Tasks.Task<App> CreateAppAsync(App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// Creates a new OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        System.Threading.Tasks.Task<ApiResponse<App>> CreateAppWithHttpInfoAsync(App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create notification
        /// </summary>
        /// <remarks>
        /// Sends notifications to your users 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNotificationSuccessResponse</returns>
        System.Threading.Tasks.Task<CreateNotificationSuccessResponse> CreateNotificationAsync(Notification notification, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create notification
        /// </summary>
        /// <remarks>
        /// Sends notifications to your users 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNotificationSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateNotificationSuccessResponse>> CreateNotificationWithHttpInfoAsync(Notification notification, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a device
        /// </summary>
        /// <remarks>
        /// Register a new device to one of your OneSignal apps &amp;#x1F6A7; Don&#39;t use this This API endpoint is designed to be used from our open source Mobile and Web Push SDKs. It is not designed for developers to use it directly, unless instructed to do so by OneSignal support. If you use this method instead of our SDKs, many OneSignal features such as conversion tracking, timezone tracking, language detection, and rich-push won&#39;t work out of the box. It will also make it harder to identify possible setup issues. This method is used to register a new device with OneSignal. If a device is already registered with the specified identifier, then this will update the existing device record instead of creating a new one. The returned player is a player / user ID. Use the returned ID to send push notifications to this specific user later, or to include this player when sending to a set of users. &amp;#x1F6A7; iOS Must set test_type to 1 when building your iOS app as development. Omit this field in your production app builds. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePlayerSuccessResponse</returns>
        System.Threading.Tasks.Task<CreatePlayerSuccessResponse> CreatePlayerAsync(Player player, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a device
        /// </summary>
        /// <remarks>
        /// Register a new device to one of your OneSignal apps &amp;#x1F6A7; Don&#39;t use this This API endpoint is designed to be used from our open source Mobile and Web Push SDKs. It is not designed for developers to use it directly, unless instructed to do so by OneSignal support. If you use this method instead of our SDKs, many OneSignal features such as conversion tracking, timezone tracking, language detection, and rich-push won&#39;t work out of the box. It will also make it harder to identify possible setup issues. This method is used to register a new device with OneSignal. If a device is already registered with the specified identifier, then this will update the existing device record instead of creating a new one. The returned player is a player / user ID. Use the returned ID to send push notifications to this specific user later, or to include this player when sending to a set of users. &amp;#x1F6A7; iOS Must set test_type to 1 when building your iOS app as development. Omit this field in your production app builds. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePlayerSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePlayerSuccessResponse>> CreatePlayerWithHttpInfoAsync(Player player, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Segments
        /// </summary>
        /// <remarks>
        /// Create segments visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segments endpoint and re-create it with this endpoint to edit. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSegmentSuccessResponse</returns>
        System.Threading.Tasks.Task<CreateSegmentSuccessResponse> CreateSegmentsAsync(string appId, Segment segment = default(Segment), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Segments
        /// </summary>
        /// <remarks>
        /// Create segments visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segments endpoint and re-create it with this endpoint to edit. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSegmentSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSegmentSuccessResponse>> CreateSegmentsWithHttpInfoAsync(string appId, Segment segment = default(Segment), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="createSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> CreateSubscriptionAsync(string appId, string aliasLabel, string aliasId, CreateSubscriptionRequestBody createSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="createSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> CreateSubscriptionWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, CreateSubscriptionRequestBody createSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> CreateUserAsync(string appId, User user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> CreateUserWithHttpInfoAsync(string appId, User user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an alias by alias label
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> DeleteAliasAsync(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an alias by alias label
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> DeleteAliasWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a user record
        /// </summary>
        /// <remarks>
        /// Delete player - Required: Used to delete a single, specific Player ID record from a specific OneSignal app. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="playerId">The OneSignal player_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletePlayerSuccessResponse</returns>
        System.Threading.Tasks.Task<DeletePlayerSuccessResponse> DeletePlayerAsync(string appId, string playerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a user record
        /// </summary>
        /// <remarks>
        /// Delete player - Required: Used to delete a single, specific Player ID record from a specific OneSignal app. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="playerId">The OneSignal player_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletePlayerSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletePlayerSuccessResponse>> DeletePlayerWithHttpInfoAsync(string appId, string playerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Segments
        /// </summary>
        /// <remarks>
        /// Delete segments (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteSegmentSuccessResponse</returns>
        System.Threading.Tasks.Task<DeleteSegmentSuccessResponse> DeleteSegmentsAsync(string appId, string segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Segments
        /// </summary>
        /// <remarks>
        /// Delete segments (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteSegmentSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteSegmentSuccessResponse>> DeleteSegmentsWithHttpInfoAsync(string appId, string segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the Subscription.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSubscriptionAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the Subscription.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubscriptionWithHttpInfoAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Stop Live Activity
        /// </summary>
        /// <remarks>
        /// Stops a Live Activity
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EndLiveActivityAsync(string appId, string activityId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stop Live Activity
        /// </summary>
        /// <remarks>
        /// Stops a Live Activity
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EndLiveActivityWithHttpInfoAsync(string appId, string activityId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export CSV of Events
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportEventsSuccessResponse</returns>
        System.Threading.Tasks.Task<ExportEventsSuccessResponse> ExportEventsAsync(string notificationId, string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export CSV of Events
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportEventsSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExportEventsSuccessResponse>> ExportEventsWithHttpInfoAsync(string notificationId, string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export CSV of Players
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportPlayersRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportPlayersSuccessResponse</returns>
        System.Threading.Tasks.Task<ExportPlayersSuccessResponse> ExportPlayersAsync(string appId, ExportPlayersRequestBody exportPlayersRequestBody = default(ExportPlayersRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export CSV of Players
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportPlayersRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportPlayersSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExportPlayersSuccessResponse>> ExportPlayersWithHttpInfoAsync(string appId, ExportPlayersRequestBody exportPlayersRequestBody = default(ExportPlayersRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityResponse</returns>
        System.Threading.Tasks.Task<UserIdentityResponse> FetchAliasesAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserIdentityResponse>> FetchAliasesWithHttpInfoAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the User’s properties, Aliases, and Subscriptions.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> FetchUserAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the User’s properties, Aliases, and Subscriptions.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> FetchUserWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> FetchUserIdentityAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> FetchUserIdentityWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View an app
        /// </summary>
        /// <remarks>
        /// View the details of a single OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        System.Threading.Tasks.Task<App> GetAppAsync(string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View an app
        /// </summary>
        /// <remarks>
        /// View the details of a single OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        System.Threading.Tasks.Task<ApiResponse<App>> GetAppWithHttpInfoAsync(string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View apps
        /// </summary>
        /// <remarks>
        /// View the details of all of your current OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;App&gt;</returns>
        System.Threading.Tasks.Task<List<App>> GetAppsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View apps
        /// </summary>
        /// <remarks>
        /// View the details of all of your current OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;App&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<App>>> GetAppsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Manifest of In-App Messages the Subscription is eligible to display by the SDK.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetEligibleIamsAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Manifest of In-App Messages the Subscription is eligible to display by the SDK.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetEligibleIamsWithHttpInfoAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View notification
        /// </summary>
        /// <remarks>
        /// View the details of a single notification and outcomes associated with it
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationWithMeta</returns>
        System.Threading.Tasks.Task<NotificationWithMeta> GetNotificationAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View notification
        /// </summary>
        /// <remarks>
        /// View the details of a single notification and outcomes associated with it
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationWithMeta)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationWithMeta>> GetNotificationWithHttpInfoAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Notification History
        /// </summary>
        /// <remarks>
        /// -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationHistorySuccessResponse</returns>
        System.Threading.Tasks.Task<NotificationHistorySuccessResponse> GetNotificationHistoryAsync(string notificationId, GetNotificationRequestBody getNotificationRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Notification History
        /// </summary>
        /// <remarks>
        /// -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationHistorySuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationHistorySuccessResponse>> GetNotificationHistoryWithHttpInfoAsync(string notificationId, GetNotificationRequestBody getNotificationRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View notifications
        /// </summary>
        /// <remarks>
        /// View the details of multiple notifications
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationSlice</returns>
        System.Threading.Tasks.Task<NotificationSlice> GetNotificationsAsync(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View notifications
        /// </summary>
        /// <remarks>
        /// View the details of multiple notifications
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationSlice)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationSlice>> GetNotificationsWithHttpInfoAsync(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View Outcomes
        /// </summary>
        /// <remarks>
        /// View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutcomesData</returns>
        System.Threading.Tasks.Task<OutcomesData> GetOutcomesAsync(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View Outcomes
        /// </summary>
        /// <remarks>
        /// View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutcomesData)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutcomesData>> GetOutcomesWithHttpInfoAsync(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View device
        /// </summary>
        /// <remarks>
        /// View the details of an existing device in one of your OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Your app_id for this device</param>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="emailAuthHash">Email - Only required if you have enabled Identity Verification and device_type is email (11). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Player</returns>
        System.Threading.Tasks.Task<Player> GetPlayerAsync(string appId, string playerId, string emailAuthHash = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View device
        /// </summary>
        /// <remarks>
        /// View the details of an existing device in one of your OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Your app_id for this device</param>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="emailAuthHash">Email - Only required if you have enabled Identity Verification and device_type is email (11). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        System.Threading.Tasks.Task<ApiResponse<Player>> GetPlayerWithHttpInfoAsync(string appId, string playerId, string emailAuthHash = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View devices
        /// </summary>
        /// <remarks>
        /// View the details of multiple devices in one of your OneSignal apps Unavailable for Apps Over 80,000 Users For performance reasons, this method is not available for larger apps. Larger apps should use the CSV export API endpoint, which is much more performant. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view players from</param>
        /// <param name="limit">How many devices to return. Max is 300. Default is 300 (optional)</param>
        /// <param name="offset">Result offset. Default is 0. Results are sorted by id; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerSlice</returns>
        System.Threading.Tasks.Task<PlayerSlice> GetPlayersAsync(string appId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View devices
        /// </summary>
        /// <remarks>
        /// View the details of multiple devices in one of your OneSignal apps Unavailable for Apps Over 80,000 Users For performance reasons, this method is not available for larger apps. Larger apps should use the CSV export API endpoint, which is much more performant. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view players from</param>
        /// <param name="limit">How many devices to return. Max is 300. Default is 300 (optional)</param>
        /// <param name="offset">Result offset. Default is 0. Results are sorted by id; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerSlice)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerSlice>> GetPlayersWithHttpInfoAsync(string appId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> IdentifyUserByAliasAsync(string appId, string aliasLabel, string aliasId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> IdentifyUserByAliasWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityResponse</returns>
        System.Threading.Tasks.Task<UserIdentityResponse> IdentifyUserBySubscriptionIdAsync(string appId, string subscriptionId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserIdentityResponse>> IdentifyUserBySubscriptionIdWithHttpInfoAsync(string appId, string subscriptionId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers this Subscription to the User identified by the identity in the payload.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityResponse</returns>
        System.Threading.Tasks.Task<UserIdentityResponse> TransferSubscriptionAsync(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers this Subscription to the User identified by the identity in the payload.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserIdentityResponse>> TransferSubscriptionWithHttpInfoAsync(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an app
        /// </summary>
        /// <remarks>
        /// Updates the name or configuration settings of an existing OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        System.Threading.Tasks.Task<App> UpdateAppAsync(string appId, App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an app
        /// </summary>
        /// <remarks>
        /// Updates the name or configuration settings of an existing OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        System.Threading.Tasks.Task<ApiResponse<App>> UpdateAppWithHttpInfoAsync(string appId, App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Live Activity via Push
        /// </summary>
        /// <remarks>
        /// Updates a specified live activity.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateLiveActivitySuccessResponse</returns>
        System.Threading.Tasks.Task<UpdateLiveActivitySuccessResponse> UpdateLiveActivityAsync(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Live Activity via Push
        /// </summary>
        /// <remarks>
        /// Updates a specified live activity.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateLiveActivitySuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateLiveActivitySuccessResponse>> UpdateLiveActivityWithHttpInfoAsync(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit device
        /// </summary>
        /// <remarks>
        /// Update an existing device in one of your OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePlayerSuccessResponse</returns>
        System.Threading.Tasks.Task<UpdatePlayerSuccessResponse> UpdatePlayerAsync(string playerId, Player player, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit device
        /// </summary>
        /// <remarks>
        /// Update an existing device in one of your OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePlayerSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePlayerSuccessResponse>> UpdatePlayerWithHttpInfoAsync(string playerId, Player player, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit tags with external user id
        /// </summary>
        /// <remarks>
        /// Update an existing device&#39;s tags in one of your OneSignal apps using the External User ID. Warning - Android SDK Data Synchronization Tags added through the Android SDK tagging methods may not update if using the API to change or update the same tag. For example, if you use SDK method sendTag(\&quot;key\&quot;, \&quot;value1\&quot;) then update the tag value to \&quot;value2\&quot; with this API endpoint. You will not be able to set the value back to \&quot;value1\&quot; through the SDK, you will need to change it to something different through the SDK to be reset. Recommendations if using this Endpoint on Android Mobile Apps: 1 - Do not use the same tag keys for SDK and API updates 2 - If you want to use the same key for both SDK and API updates, call the SDK getTags method first to update the device&#39;s tags. This is only applicable on the Android Mobile App SDKs. &amp;#128216; Deleting Tags To delete a tag, include its key and set its value to blank. Omitting a key/value will not delete it. For example, if I wanted to delete two existing tags rank and category while simultaneously adding a new tag class, the tags JSON would look like the following: \&quot;tags\&quot;: {    \&quot;rank\&quot;: \&quot;\&quot;,    \&quot;category\&quot;: \&quot;\&quot;,    \&quot;class\&quot;: \&quot;my_new_value\&quot; } 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID the user record is found under.</param>
        /// <param name="externalUserId">The External User ID mapped to teh device record in OneSignal.  Must be actively set on the device to be updated.</param>
        /// <param name="updatePlayerTagsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePlayerTagsSuccessResponse</returns>
        System.Threading.Tasks.Task<UpdatePlayerTagsSuccessResponse> UpdatePlayerTagsAsync(string appId, string externalUserId, UpdatePlayerTagsRequestBody updatePlayerTagsRequestBody = default(UpdatePlayerTagsRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit tags with external user id
        /// </summary>
        /// <remarks>
        /// Update an existing device&#39;s tags in one of your OneSignal apps using the External User ID. Warning - Android SDK Data Synchronization Tags added through the Android SDK tagging methods may not update if using the API to change or update the same tag. For example, if you use SDK method sendTag(\&quot;key\&quot;, \&quot;value1\&quot;) then update the tag value to \&quot;value2\&quot; with this API endpoint. You will not be able to set the value back to \&quot;value1\&quot; through the SDK, you will need to change it to something different through the SDK to be reset. Recommendations if using this Endpoint on Android Mobile Apps: 1 - Do not use the same tag keys for SDK and API updates 2 - If you want to use the same key for both SDK and API updates, call the SDK getTags method first to update the device&#39;s tags. This is only applicable on the Android Mobile App SDKs. &amp;#128216; Deleting Tags To delete a tag, include its key and set its value to blank. Omitting a key/value will not delete it. For example, if I wanted to delete two existing tags rank and category while simultaneously adding a new tag class, the tags JSON would look like the following: \&quot;tags\&quot;: {    \&quot;rank\&quot;: \&quot;\&quot;,    \&quot;category\&quot;: \&quot;\&quot;,    \&quot;class\&quot;: \&quot;my_new_value\&quot; } 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID the user record is found under.</param>
        /// <param name="externalUserId">The External User ID mapped to teh device record in OneSignal.  Must be actively set on the device to be updated.</param>
        /// <param name="updatePlayerTagsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePlayerTagsSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatePlayerTagsSuccessResponse>> UpdatePlayerTagsWithHttpInfoAsync(string appId, string externalUserId, UpdatePlayerTagsRequestBody updatePlayerTagsRequestBody = default(UpdatePlayerTagsRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing Subscription’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSubscriptionAsync(string appId, string subscriptionId, UpdateSubscriptionRequestBody updateSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing Subscription’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSubscriptionWithHttpInfoAsync(string appId, string subscriptionId, UpdateSubscriptionRequestBody updateSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing User’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        System.Threading.Tasks.Task<InlineResponse202> UpdateUserAsync(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing User’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse202>> UpdateUserWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private OneSignalApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = OneSignalApi.Client.Configuration.MergeConfigurations(
                OneSignalApi.Client.GlobalConfiguration.Instance,
                new OneSignalApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OneSignalApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OneSignalApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OneSignalApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(OneSignalApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OneSignalApi.Client.Configuration.MergeConfigurations(
                OneSignalApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OneSignalApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OneSignalApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OneSignalApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(OneSignalApi.Client.ISynchronousClient client, OneSignalApi.Client.IAsynchronousClient asyncClient, OneSignalApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OneSignalApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OneSignalApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OneSignalApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OneSignalApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OneSignalApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Start Live Activity Starts a Live Activity
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="beginLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void BeginLiveActivity(string appId, string activityId, BeginLiveActivityRequest beginLiveActivityRequest, int operationIndex = 0)
        {
            BeginLiveActivityWithHttpInfo(appId, activityId, beginLiveActivityRequest);
        }

        /// <summary>
        /// Start Live Activity Starts a Live Activity
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="beginLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OneSignalApi.Client.ApiResponse<Object> BeginLiveActivityWithHttpInfo(string appId, string activityId, BeginLiveActivityRequest beginLiveActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->BeginLiveActivity");
            }

            // verify the required parameter 'activityId' is set
            if (activityId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'activityId' when calling DefaultApi->BeginLiveActivity");
            }

            // verify the required parameter 'beginLiveActivityRequest' is set
            if (beginLiveActivityRequest == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'beginLiveActivityRequest' when calling DefaultApi->BeginLiveActivity");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("activity_id", OneSignalApi.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.Data = beginLiveActivityRequest;

            localVarRequestOptions.Operation = "DefaultApi.BeginLiveActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/apps/{app_id}/live_activities/{activity_id}/token", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BeginLiveActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Start Live Activity Starts a Live Activity
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="beginLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BeginLiveActivityAsync(string appId, string activityId, BeginLiveActivityRequest beginLiveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await BeginLiveActivityWithHttpInfoAsync(appId, activityId, beginLiveActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Start Live Activity Starts a Live Activity
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="beginLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<Object>> BeginLiveActivityWithHttpInfoAsync(string appId, string activityId, BeginLiveActivityRequest beginLiveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->BeginLiveActivity");
            }

            // verify the required parameter 'activityId' is set
            if (activityId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'activityId' when calling DefaultApi->BeginLiveActivity");
            }

            // verify the required parameter 'beginLiveActivityRequest' is set
            if (beginLiveActivityRequest == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'beginLiveActivityRequest' when calling DefaultApi->BeginLiveActivity");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("activity_id", OneSignalApi.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.Data = beginLiveActivityRequest;

            localVarRequestOptions.Operation = "DefaultApi.BeginLiveActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/apps/{app_id}/live_activities/{activity_id}/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BeginLiveActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop a scheduled or currently outgoing notification Used to stop a scheduled or currently outgoing notification
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CancelNotificationSuccessResponse</returns>
        public CancelNotificationSuccessResponse CancelNotification(string appId, string notificationId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<CancelNotificationSuccessResponse> localVarResponse = CancelNotificationWithHttpInfo(appId, notificationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop a scheduled or currently outgoing notification Used to stop a scheduled or currently outgoing notification
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CancelNotificationSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<CancelNotificationSuccessResponse> CancelNotificationWithHttpInfo(string appId, string notificationId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CancelNotification");
            }

            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->CancelNotification");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));

            localVarRequestOptions.Operation = "DefaultApi.CancelNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<CancelNotificationSuccessResponse>("/notifications/{notification_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop a scheduled or currently outgoing notification Used to stop a scheduled or currently outgoing notification
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CancelNotificationSuccessResponse</returns>
        public async System.Threading.Tasks.Task<CancelNotificationSuccessResponse> CancelNotificationAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<CancelNotificationSuccessResponse> localVarResponse = await CancelNotificationWithHttpInfoAsync(appId, notificationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop a scheduled or currently outgoing notification Used to stop a scheduled or currently outgoing notification
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CancelNotificationSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<CancelNotificationSuccessResponse>> CancelNotificationWithHttpInfoAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CancelNotification");
            }

            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->CancelNotification");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));

            localVarRequestOptions.Operation = "DefaultApi.CancelNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<CancelNotificationSuccessResponse>("/notifications/{notification_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an app Creates a new OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>App</returns>
        public App CreateApp(App app, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<App> localVarResponse = CreateAppWithHttpInfo(app);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an app Creates a new OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of App</returns>
        public OneSignalApi.Client.ApiResponse<App> CreateAppWithHttpInfo(App app, int operationIndex = 0)
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'app' when calling DefaultApi->CreateApp");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = app;

            localVarRequestOptions.Operation = "DefaultApi.CreateApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (user_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<App>("/apps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an app Creates a new OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        public async System.Threading.Tasks.Task<App> CreateAppAsync(App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<App> localVarResponse = await CreateAppWithHttpInfoAsync(app, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an app Creates a new OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<App>> CreateAppWithHttpInfoAsync(App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'app' when calling DefaultApi->CreateApp");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = app;

            localVarRequestOptions.Operation = "DefaultApi.CreateApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (user_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<App>("/apps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create notification Sends notifications to your users 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateNotificationSuccessResponse</returns>
        public CreateNotificationSuccessResponse CreateNotification(Notification notification, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<CreateNotificationSuccessResponse> localVarResponse = CreateNotificationWithHttpInfo(notification);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create notification Sends notifications to your users 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateNotificationSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<CreateNotificationSuccessResponse> CreateNotificationWithHttpInfo(Notification notification, int operationIndex = 0)
        {
            // verify the required parameter 'notification' is set
            if (notification == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notification' when calling DefaultApi->CreateNotification");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = notification;

            localVarRequestOptions.Operation = "DefaultApi.CreateNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateNotificationSuccessResponse>("/notifications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create notification Sends notifications to your users 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNotificationSuccessResponse</returns>
        public async System.Threading.Tasks.Task<CreateNotificationSuccessResponse> CreateNotificationAsync(Notification notification, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<CreateNotificationSuccessResponse> localVarResponse = await CreateNotificationWithHttpInfoAsync(notification, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create notification Sends notifications to your users 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNotificationSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<CreateNotificationSuccessResponse>> CreateNotificationWithHttpInfoAsync(Notification notification, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'notification' is set
            if (notification == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notification' when calling DefaultApi->CreateNotification");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = notification;

            localVarRequestOptions.Operation = "DefaultApi.CreateNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateNotificationSuccessResponse>("/notifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a device Register a new device to one of your OneSignal apps &amp;#x1F6A7; Don&#39;t use this This API endpoint is designed to be used from our open source Mobile and Web Push SDKs. It is not designed for developers to use it directly, unless instructed to do so by OneSignal support. If you use this method instead of our SDKs, many OneSignal features such as conversion tracking, timezone tracking, language detection, and rich-push won&#39;t work out of the box. It will also make it harder to identify possible setup issues. This method is used to register a new device with OneSignal. If a device is already registered with the specified identifier, then this will update the existing device record instead of creating a new one. The returned player is a player / user ID. Use the returned ID to send push notifications to this specific user later, or to include this player when sending to a set of users. &amp;#x1F6A7; iOS Must set test_type to 1 when building your iOS app as development. Omit this field in your production app builds. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePlayerSuccessResponse</returns>
        public CreatePlayerSuccessResponse CreatePlayer(Player player, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<CreatePlayerSuccessResponse> localVarResponse = CreatePlayerWithHttpInfo(player);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a device Register a new device to one of your OneSignal apps &amp;#x1F6A7; Don&#39;t use this This API endpoint is designed to be used from our open source Mobile and Web Push SDKs. It is not designed for developers to use it directly, unless instructed to do so by OneSignal support. If you use this method instead of our SDKs, many OneSignal features such as conversion tracking, timezone tracking, language detection, and rich-push won&#39;t work out of the box. It will also make it harder to identify possible setup issues. This method is used to register a new device with OneSignal. If a device is already registered with the specified identifier, then this will update the existing device record instead of creating a new one. The returned player is a player / user ID. Use the returned ID to send push notifications to this specific user later, or to include this player when sending to a set of users. &amp;#x1F6A7; iOS Must set test_type to 1 when building your iOS app as development. Omit this field in your production app builds. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePlayerSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<CreatePlayerSuccessResponse> CreatePlayerWithHttpInfo(Player player, int operationIndex = 0)
        {
            // verify the required parameter 'player' is set
            if (player == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'player' when calling DefaultApi->CreatePlayer");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = player;

            localVarRequestOptions.Operation = "DefaultApi.CreatePlayer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatePlayerSuccessResponse>("/players", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a device Register a new device to one of your OneSignal apps &amp;#x1F6A7; Don&#39;t use this This API endpoint is designed to be used from our open source Mobile and Web Push SDKs. It is not designed for developers to use it directly, unless instructed to do so by OneSignal support. If you use this method instead of our SDKs, many OneSignal features such as conversion tracking, timezone tracking, language detection, and rich-push won&#39;t work out of the box. It will also make it harder to identify possible setup issues. This method is used to register a new device with OneSignal. If a device is already registered with the specified identifier, then this will update the existing device record instead of creating a new one. The returned player is a player / user ID. Use the returned ID to send push notifications to this specific user later, or to include this player when sending to a set of users. &amp;#x1F6A7; iOS Must set test_type to 1 when building your iOS app as development. Omit this field in your production app builds. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePlayerSuccessResponse</returns>
        public async System.Threading.Tasks.Task<CreatePlayerSuccessResponse> CreatePlayerAsync(Player player, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<CreatePlayerSuccessResponse> localVarResponse = await CreatePlayerWithHttpInfoAsync(player, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a device Register a new device to one of your OneSignal apps &amp;#x1F6A7; Don&#39;t use this This API endpoint is designed to be used from our open source Mobile and Web Push SDKs. It is not designed for developers to use it directly, unless instructed to do so by OneSignal support. If you use this method instead of our SDKs, many OneSignal features such as conversion tracking, timezone tracking, language detection, and rich-push won&#39;t work out of the box. It will also make it harder to identify possible setup issues. This method is used to register a new device with OneSignal. If a device is already registered with the specified identifier, then this will update the existing device record instead of creating a new one. The returned player is a player / user ID. Use the returned ID to send push notifications to this specific user later, or to include this player when sending to a set of users. &amp;#x1F6A7; iOS Must set test_type to 1 when building your iOS app as development. Omit this field in your production app builds. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePlayerSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<CreatePlayerSuccessResponse>> CreatePlayerWithHttpInfoAsync(Player player, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'player' is set
            if (player == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'player' when calling DefaultApi->CreatePlayer");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = player;

            localVarRequestOptions.Operation = "DefaultApi.CreatePlayer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePlayerSuccessResponse>("/players", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Segments Create segments visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segments endpoint and re-create it with this endpoint to edit. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSegmentSuccessResponse</returns>
        public CreateSegmentSuccessResponse CreateSegments(string appId, Segment segment = default(Segment), int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<CreateSegmentSuccessResponse> localVarResponse = CreateSegmentsWithHttpInfo(appId, segment);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Segments Create segments visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segments endpoint and re-create it with this endpoint to edit. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSegmentSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<CreateSegmentSuccessResponse> CreateSegmentsWithHttpInfo(string appId, Segment segment = default(Segment), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateSegments");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = segment;

            localVarRequestOptions.Operation = "DefaultApi.CreateSegments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSegmentSuccessResponse>("/apps/{app_id}/segments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSegments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Segments Create segments visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segments endpoint and re-create it with this endpoint to edit. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSegmentSuccessResponse</returns>
        public async System.Threading.Tasks.Task<CreateSegmentSuccessResponse> CreateSegmentsAsync(string appId, Segment segment = default(Segment), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<CreateSegmentSuccessResponse> localVarResponse = await CreateSegmentsWithHttpInfoAsync(appId, segment, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Segments Create segments visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segments endpoint and re-create it with this endpoint to edit. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSegmentSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<CreateSegmentSuccessResponse>> CreateSegmentsWithHttpInfoAsync(string appId, Segment segment = default(Segment), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateSegments");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = segment;

            localVarRequestOptions.Operation = "DefaultApi.CreateSegments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSegmentSuccessResponse>("/apps/{app_id}/segments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSegments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="createSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 CreateSubscription(string appId, string aliasLabel, string aliasId, CreateSubscriptionRequestBody createSubscriptionRequestBody, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<InlineResponse201> localVarResponse = CreateSubscriptionWithHttpInfo(appId, aliasLabel, aliasId, createSubscriptionRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="createSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public OneSignalApi.Client.ApiResponse<InlineResponse201> CreateSubscriptionWithHttpInfo(string appId, string aliasLabel, string aliasId, CreateSubscriptionRequestBody createSubscriptionRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateSubscription");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->CreateSubscription");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->CreateSubscription");
            }

            // verify the required parameter 'createSubscriptionRequestBody' is set
            if (createSubscriptionRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'createSubscriptionRequestBody' when calling DefaultApi->CreateSubscription");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = createSubscriptionRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.CreateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InlineResponse201>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="createSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> CreateSubscriptionAsync(string appId, string aliasLabel, string aliasId, CreateSubscriptionRequestBody createSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<InlineResponse201> localVarResponse = await CreateSubscriptionWithHttpInfoAsync(appId, aliasLabel, aliasId, createSubscriptionRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="createSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<InlineResponse201>> CreateSubscriptionWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, CreateSubscriptionRequestBody createSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateSubscription");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->CreateSubscription");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->CreateSubscription");
            }

            // verify the required parameter 'createSubscriptionRequestBody' is set
            if (createSubscriptionRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'createSubscriptionRequestBody' when calling DefaultApi->CreateSubscription");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = createSubscriptionRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.CreateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse201>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User CreateUser(string appId, User user, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<User> localVarResponse = CreateUserWithHttpInfo(appId, user);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public OneSignalApi.Client.ApiResponse<User> CreateUserWithHttpInfo(string appId, User user, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateUser");
            }

            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'user' when calling DefaultApi->CreateUser");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = user;

            localVarRequestOptions.Operation = "DefaultApi.CreateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<User>("/apps/{app_id}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> CreateUserAsync(string appId, User user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<User> localVarResponse = await CreateUserWithHttpInfoAsync(appId, user, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<User>> CreateUserWithHttpInfoAsync(string appId, User user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateUser");
            }

            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'user' when calling DefaultApi->CreateUser");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = user;

            localVarRequestOptions.Operation = "DefaultApi.CreateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/apps/{app_id}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes an alias by alias label
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 DeleteAlias(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<InlineResponse200> localVarResponse = DeleteAliasWithHttpInfo(appId, aliasLabel, aliasId, aliasLabelToDelete);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes an alias by alias label
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public OneSignalApi.Client.ApiResponse<InlineResponse200> DeleteAliasWithHttpInfo(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteAlias");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->DeleteAlias");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->DeleteAlias");
            }

            // verify the required parameter 'aliasLabelToDelete' is set
            if (aliasLabelToDelete == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabelToDelete' when calling DefaultApi->DeleteAlias");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label_to_delete", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabelToDelete)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<InlineResponse200>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/identity/{alias_label_to_delete}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes an alias by alias label
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> DeleteAliasAsync(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<InlineResponse200> localVarResponse = await DeleteAliasWithHttpInfoAsync(appId, aliasLabel, aliasId, aliasLabelToDelete, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes an alias by alias label
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<InlineResponse200>> DeleteAliasWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteAlias");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->DeleteAlias");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->DeleteAlias");
            }

            // verify the required parameter 'aliasLabelToDelete' is set
            if (aliasLabelToDelete == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabelToDelete' when calling DefaultApi->DeleteAlias");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label_to_delete", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabelToDelete)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<InlineResponse200>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/identity/{alias_label_to_delete}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a user record Delete player - Required: Used to delete a single, specific Player ID record from a specific OneSignal app. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="playerId">The OneSignal player_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeletePlayerSuccessResponse</returns>
        public DeletePlayerSuccessResponse DeletePlayer(string appId, string playerId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<DeletePlayerSuccessResponse> localVarResponse = DeletePlayerWithHttpInfo(appId, playerId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a user record Delete player - Required: Used to delete a single, specific Player ID record from a specific OneSignal app. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="playerId">The OneSignal player_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeletePlayerSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<DeletePlayerSuccessResponse> DeletePlayerWithHttpInfo(string appId, string playerId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeletePlayer");
            }

            // verify the required parameter 'playerId' is set
            if (playerId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'playerId' when calling DefaultApi->DeletePlayer");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player_id", OneSignalApi.Client.ClientUtils.ParameterToString(playerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));

            localVarRequestOptions.Operation = "DefaultApi.DeletePlayer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeletePlayerSuccessResponse>("/players/{player_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a user record Delete player - Required: Used to delete a single, specific Player ID record from a specific OneSignal app. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="playerId">The OneSignal player_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeletePlayerSuccessResponse</returns>
        public async System.Threading.Tasks.Task<DeletePlayerSuccessResponse> DeletePlayerAsync(string appId, string playerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<DeletePlayerSuccessResponse> localVarResponse = await DeletePlayerWithHttpInfoAsync(appId, playerId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a user record Delete player - Required: Used to delete a single, specific Player ID record from a specific OneSignal app. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="playerId">The OneSignal player_id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeletePlayerSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<DeletePlayerSuccessResponse>> DeletePlayerWithHttpInfoAsync(string appId, string playerId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeletePlayer");
            }

            // verify the required parameter 'playerId' is set
            if (playerId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'playerId' when calling DefaultApi->DeletePlayer");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player_id", OneSignalApi.Client.ClientUtils.ParameterToString(playerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));

            localVarRequestOptions.Operation = "DefaultApi.DeletePlayer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeletePlayerSuccessResponse>("/players/{player_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Segments Delete segments (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteSegmentSuccessResponse</returns>
        public DeleteSegmentSuccessResponse DeleteSegments(string appId, string segmentId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<DeleteSegmentSuccessResponse> localVarResponse = DeleteSegmentsWithHttpInfo(appId, segmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Segments Delete segments (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteSegmentSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<DeleteSegmentSuccessResponse> DeleteSegmentsWithHttpInfo(string appId, string segmentId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteSegments");
            }

            // verify the required parameter 'segmentId' is set
            if (segmentId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'segmentId' when calling DefaultApi->DeleteSegments");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("segment_id", OneSignalApi.Client.ClientUtils.ParameterToString(segmentId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteSegments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteSegmentSuccessResponse>("/apps/{app_id}/segments/{segment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSegments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Segments Delete segments (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteSegmentSuccessResponse</returns>
        public async System.Threading.Tasks.Task<DeleteSegmentSuccessResponse> DeleteSegmentsAsync(string appId, string segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<DeleteSegmentSuccessResponse> localVarResponse = await DeleteSegmentsWithHttpInfoAsync(appId, segmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Segments Delete segments (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteSegmentSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<DeleteSegmentSuccessResponse>> DeleteSegmentsWithHttpInfoAsync(string appId, string segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteSegments");
            }

            // verify the required parameter 'segmentId' is set
            if (segmentId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'segmentId' when calling DefaultApi->DeleteSegments");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("segment_id", OneSignalApi.Client.ClientUtils.ParameterToString(segmentId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteSegments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteSegmentSuccessResponse>("/apps/{app_id}/segments/{segment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSegments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes the Subscription.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteSubscription(string appId, string subscriptionId, int operationIndex = 0)
        {
            DeleteSubscriptionWithHttpInfo(appId, subscriptionId);
        }

        /// <summary>
        ///  Deletes the Subscription.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OneSignalApi.Client.ApiResponse<Object> DeleteSubscriptionWithHttpInfo(string appId, string subscriptionId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->DeleteSubscription");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/apps/{app_id}/subscriptions/{subscription_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes the Subscription.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSubscriptionAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSubscriptionWithHttpInfoAsync(appId, subscriptionId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes the Subscription.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<Object>> DeleteSubscriptionWithHttpInfoAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->DeleteSubscription");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/apps/{app_id}/subscriptions/{subscription_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteUser(string appId, string aliasLabel, string aliasId, int operationIndex = 0)
        {
            DeleteUserWithHttpInfo(appId, aliasLabel, aliasId);
        }

        /// <summary>
        ///  Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OneSignalApi.Client.ApiResponse<Object> DeleteUserWithHttpInfo(string appId, string aliasLabel, string aliasId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteUser");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->DeleteUser");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->DeleteUser");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/apps/{app_id}/users/by/{alias_label}/{alias_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteUserWithHttpInfoAsync(appId, aliasLabel, aliasId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<Object>> DeleteUserWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteUser");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->DeleteUser");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->DeleteUser");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/apps/{app_id}/users/by/{alias_label}/{alias_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop Live Activity Stops a Live Activity
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void EndLiveActivity(string appId, string activityId, string subscriptionId, int operationIndex = 0)
        {
            EndLiveActivityWithHttpInfo(appId, activityId, subscriptionId);
        }

        /// <summary>
        /// Stop Live Activity Stops a Live Activity
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OneSignalApi.Client.ApiResponse<Object> EndLiveActivityWithHttpInfo(string appId, string activityId, string subscriptionId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->EndLiveActivity");
            }

            // verify the required parameter 'activityId' is set
            if (activityId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'activityId' when calling DefaultApi->EndLiveActivity");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->EndLiveActivity");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("activity_id", OneSignalApi.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.EndLiveActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/apps/{app_id}/live_activities/{activity_id}/token/{subscription_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EndLiveActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop Live Activity Stops a Live Activity
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EndLiveActivityAsync(string appId, string activityId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await EndLiveActivityWithHttpInfoAsync(appId, activityId, subscriptionId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Stop Live Activity Stops a Live Activity
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="subscriptionId">Subscription ID</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<Object>> EndLiveActivityWithHttpInfoAsync(string appId, string activityId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->EndLiveActivity");
            }

            // verify the required parameter 'activityId' is set
            if (activityId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'activityId' when calling DefaultApi->EndLiveActivity");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->EndLiveActivity");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("activity_id", OneSignalApi.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.EndLiveActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/apps/{app_id}/live_activities/{activity_id}/token/{subscription_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EndLiveActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export CSV of Events Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportEventsSuccessResponse</returns>
        public ExportEventsSuccessResponse ExportEvents(string notificationId, string appId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<ExportEventsSuccessResponse> localVarResponse = ExportEventsWithHttpInfo(notificationId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export CSV of Events Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportEventsSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<ExportEventsSuccessResponse> ExportEventsWithHttpInfo(string notificationId, string appId, int operationIndex = 0)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->ExportEvents");
            }

            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->ExportEvents");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));

            localVarRequestOptions.Operation = "DefaultApi.ExportEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ExportEventsSuccessResponse>("/notifications/{notification_id}/export_events?app_id={app_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export CSV of Events Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportEventsSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ExportEventsSuccessResponse> ExportEventsAsync(string notificationId, string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<ExportEventsSuccessResponse> localVarResponse = await ExportEventsWithHttpInfoAsync(notificationId, appId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export CSV of Events Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportEventsSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<ExportEventsSuccessResponse>> ExportEventsWithHttpInfoAsync(string notificationId, string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->ExportEvents");
            }

            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->ExportEvents");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));

            localVarRequestOptions.Operation = "DefaultApi.ExportEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ExportEventsSuccessResponse>("/notifications/{notification_id}/export_events?app_id={app_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export CSV of Players Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportPlayersRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportPlayersSuccessResponse</returns>
        public ExportPlayersSuccessResponse ExportPlayers(string appId, ExportPlayersRequestBody exportPlayersRequestBody = default(ExportPlayersRequestBody), int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<ExportPlayersSuccessResponse> localVarResponse = ExportPlayersWithHttpInfo(appId, exportPlayersRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export CSV of Players Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportPlayersRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportPlayersSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<ExportPlayersSuccessResponse> ExportPlayersWithHttpInfo(string appId, ExportPlayersRequestBody exportPlayersRequestBody = default(ExportPlayersRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->ExportPlayers");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = exportPlayersRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.ExportPlayers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ExportPlayersSuccessResponse>("/players/csv_export?app_id={app_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportPlayers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export CSV of Players Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportPlayersRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportPlayersSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ExportPlayersSuccessResponse> ExportPlayersAsync(string appId, ExportPlayersRequestBody exportPlayersRequestBody = default(ExportPlayersRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<ExportPlayersSuccessResponse> localVarResponse = await ExportPlayersWithHttpInfoAsync(appId, exportPlayersRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export CSV of Players Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportPlayersRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportPlayersSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<ExportPlayersSuccessResponse>> ExportPlayersWithHttpInfoAsync(string appId, ExportPlayersRequestBody exportPlayersRequestBody = default(ExportPlayersRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->ExportPlayers");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = exportPlayersRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.ExportPlayers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ExportPlayersSuccessResponse>("/players/csv_export?app_id={app_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportPlayers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityResponse</returns>
        public UserIdentityResponse FetchAliases(string appId, string subscriptionId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<UserIdentityResponse> localVarResponse = FetchAliasesWithHttpInfo(appId, subscriptionId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityResponse</returns>
        public OneSignalApi.Client.ApiResponse<UserIdentityResponse> FetchAliasesWithHttpInfo(string appId, string subscriptionId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->FetchAliases");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->FetchAliases");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.FetchAliases";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserIdentityResponse>("/apps/{app_id}/subscriptions/{subscription_id}/user/identity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchAliases", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityResponse</returns>
        public async System.Threading.Tasks.Task<UserIdentityResponse> FetchAliasesAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<UserIdentityResponse> localVarResponse = await FetchAliasesWithHttpInfoAsync(appId, subscriptionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<UserIdentityResponse>> FetchAliasesWithHttpInfoAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->FetchAliases");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->FetchAliases");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.FetchAliases";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserIdentityResponse>("/apps/{app_id}/subscriptions/{subscription_id}/user/identity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchAliases", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the User’s properties, Aliases, and Subscriptions.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User FetchUser(string appId, string aliasLabel, string aliasId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<User> localVarResponse = FetchUserWithHttpInfo(appId, aliasLabel, aliasId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the User’s properties, Aliases, and Subscriptions.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public OneSignalApi.Client.ApiResponse<User> FetchUserWithHttpInfo(string appId, string aliasLabel, string aliasId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->FetchUser");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->FetchUser");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->FetchUser");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.FetchUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/apps/{app_id}/users/by/{alias_label}/{alias_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the User’s properties, Aliases, and Subscriptions.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> FetchUserAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<User> localVarResponse = await FetchUserWithHttpInfoAsync(appId, aliasLabel, aliasId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the User’s properties, Aliases, and Subscriptions.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<User>> FetchUserWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->FetchUser");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->FetchUser");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->FetchUser");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.FetchUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/apps/{app_id}/users/by/{alias_label}/{alias_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 FetchUserIdentity(string appId, string aliasLabel, string aliasId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<InlineResponse200> localVarResponse = FetchUserIdentityWithHttpInfo(appId, aliasLabel, aliasId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public OneSignalApi.Client.ApiResponse<InlineResponse200> FetchUserIdentityWithHttpInfo(string appId, string aliasLabel, string aliasId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->FetchUserIdentity");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->FetchUserIdentity");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->FetchUserIdentity");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.FetchUserIdentity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse200>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/identity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchUserIdentity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> FetchUserIdentityAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<InlineResponse200> localVarResponse = await FetchUserIdentityWithHttpInfoAsync(appId, aliasLabel, aliasId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<InlineResponse200>> FetchUserIdentityWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->FetchUserIdentity");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->FetchUserIdentity");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->FetchUserIdentity");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.FetchUserIdentity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/identity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FetchUserIdentity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View an app View the details of a single OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>App</returns>
        public App GetApp(string appId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<App> localVarResponse = GetAppWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View an app View the details of a single OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of App</returns>
        public OneSignalApi.Client.ApiResponse<App> GetAppWithHttpInfo(string appId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetApp");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (user_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<App>("/apps/{app_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View an app View the details of a single OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        public async System.Threading.Tasks.Task<App> GetAppAsync(string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<App> localVarResponse = await GetAppWithHttpInfoAsync(appId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View an app View the details of a single OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<App>> GetAppWithHttpInfoAsync(string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetApp");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (user_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<App>("/apps/{app_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View apps View the details of all of your current OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;App&gt;</returns>
        public List<App> GetApps(int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<List<App>> localVarResponse = GetAppsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// View apps View the details of all of your current OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;App&gt;</returns>
        public OneSignalApi.Client.ApiResponse<List<App>> GetAppsWithHttpInfo(int operationIndex = 0)
        {
            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetApps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (user_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<App>>("/apps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View apps View the details of all of your current OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;App&gt;</returns>
        public async System.Threading.Tasks.Task<List<App>> GetAppsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<List<App>> localVarResponse = await GetAppsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View apps View the details of all of your current OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;App&gt;)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<List<App>>> GetAppsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetApps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (user_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<App>>("/apps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Manifest of In-App Messages the Subscription is eligible to display by the SDK.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetEligibleIams(string appId, string subscriptionId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<InlineResponse2003> localVarResponse = GetEligibleIamsWithHttpInfo(appId, subscriptionId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Manifest of In-App Messages the Subscription is eligible to display by the SDK.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public OneSignalApi.Client.ApiResponse<InlineResponse2003> GetEligibleIamsWithHttpInfo(string appId, string subscriptionId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetEligibleIams");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->GetEligibleIams");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetEligibleIams";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<InlineResponse2003>("/apps/{app_id}/subscriptions/{subscription_id}/iams", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEligibleIams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Manifest of In-App Messages the Subscription is eligible to display by the SDK.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GetEligibleIamsAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<InlineResponse2003> localVarResponse = await GetEligibleIamsWithHttpInfoAsync(appId, subscriptionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Manifest of In-App Messages the Subscription is eligible to display by the SDK.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<InlineResponse2003>> GetEligibleIamsWithHttpInfoAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetEligibleIams");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->GetEligibleIams");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetEligibleIams";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2003>("/apps/{app_id}/subscriptions/{subscription_id}/iams", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEligibleIams", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View notification View the details of a single notification and outcomes associated with it
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationWithMeta</returns>
        public NotificationWithMeta GetNotification(string appId, string notificationId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<NotificationWithMeta> localVarResponse = GetNotificationWithHttpInfo(appId, notificationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View notification View the details of a single notification and outcomes associated with it
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationWithMeta</returns>
        public OneSignalApi.Client.ApiResponse<NotificationWithMeta> GetNotificationWithHttpInfo(string appId, string notificationId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetNotification");
            }

            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->GetNotification");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));

            localVarRequestOptions.Operation = "DefaultApi.GetNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NotificationWithMeta>("/notifications/{notification_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View notification View the details of a single notification and outcomes associated with it
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationWithMeta</returns>
        public async System.Threading.Tasks.Task<NotificationWithMeta> GetNotificationAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<NotificationWithMeta> localVarResponse = await GetNotificationWithHttpInfoAsync(appId, notificationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View notification View the details of a single notification and outcomes associated with it
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationWithMeta)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<NotificationWithMeta>> GetNotificationWithHttpInfoAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetNotification");
            }

            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->GetNotification");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));

            localVarRequestOptions.Operation = "DefaultApi.GetNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NotificationWithMeta>("/notifications/{notification_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Notification History -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationHistorySuccessResponse</returns>
        public NotificationHistorySuccessResponse GetNotificationHistory(string notificationId, GetNotificationRequestBody getNotificationRequestBody, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<NotificationHistorySuccessResponse> localVarResponse = GetNotificationHistoryWithHttpInfo(notificationId, getNotificationRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Notification History -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationHistorySuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<NotificationHistorySuccessResponse> GetNotificationHistoryWithHttpInfo(string notificationId, GetNotificationRequestBody getNotificationRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->GetNotificationHistory");
            }

            // verify the required parameter 'getNotificationRequestBody' is set
            if (getNotificationRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'getNotificationRequestBody' when calling DefaultApi->GetNotificationHistory");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.Data = getNotificationRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.GetNotificationHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NotificationHistorySuccessResponse>("/notifications/{notification_id}/history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotificationHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Notification History -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationHistorySuccessResponse</returns>
        public async System.Threading.Tasks.Task<NotificationHistorySuccessResponse> GetNotificationHistoryAsync(string notificationId, GetNotificationRequestBody getNotificationRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<NotificationHistorySuccessResponse> localVarResponse = await GetNotificationHistoryWithHttpInfoAsync(notificationId, getNotificationRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Notification History -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationHistorySuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<NotificationHistorySuccessResponse>> GetNotificationHistoryWithHttpInfoAsync(string notificationId, GetNotificationRequestBody getNotificationRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->GetNotificationHistory");
            }

            // verify the required parameter 'getNotificationRequestBody' is set
            if (getNotificationRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'getNotificationRequestBody' when calling DefaultApi->GetNotificationHistory");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.Data = getNotificationRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.GetNotificationHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NotificationHistorySuccessResponse>("/notifications/{notification_id}/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotificationHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View notifications View the details of multiple notifications
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationSlice</returns>
        public NotificationSlice GetNotifications(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<NotificationSlice> localVarResponse = GetNotificationsWithHttpInfo(appId, limit, offset, kind);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View notifications View the details of multiple notifications
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationSlice</returns>
        public OneSignalApi.Client.ApiResponse<NotificationSlice> GetNotificationsWithHttpInfo(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetNotifications");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (kind != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "kind", kind));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetNotifications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NotificationSlice>("/notifications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotifications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View notifications View the details of multiple notifications
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationSlice</returns>
        public async System.Threading.Tasks.Task<NotificationSlice> GetNotificationsAsync(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<NotificationSlice> localVarResponse = await GetNotificationsWithHttpInfoAsync(appId, limit, offset, kind, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View notifications View the details of multiple notifications
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationSlice)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<NotificationSlice>> GetNotificationsWithHttpInfoAsync(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetNotifications");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (kind != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "kind", kind));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetNotifications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NotificationSlice>("/notifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotifications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View Outcomes View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutcomesData</returns>
        public OutcomesData GetOutcomes(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<OutcomesData> localVarResponse = GetOutcomesWithHttpInfo(appId, outcomeNames, outcomeNames2, outcomeTimeRange, outcomePlatforms, outcomeAttribution);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View Outcomes View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutcomesData</returns>
        public OneSignalApi.Client.ApiResponse<OutcomesData> GetOutcomesWithHttpInfo(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetOutcomes");
            }

            // verify the required parameter 'outcomeNames' is set
            if (outcomeNames == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'outcomeNames' when calling DefaultApi->GetOutcomes");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_names", outcomeNames));
            if (outcomeNames2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_names[]", outcomeNames2));
            }
            if (outcomeTimeRange != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_time_range", outcomeTimeRange));
            }
            if (outcomePlatforms != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_platforms", outcomePlatforms));
            }
            if (outcomeAttribution != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_attribution", outcomeAttribution));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetOutcomes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OutcomesData>("/apps/{app_id}/outcomes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOutcomes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View Outcomes View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutcomesData</returns>
        public async System.Threading.Tasks.Task<OutcomesData> GetOutcomesAsync(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<OutcomesData> localVarResponse = await GetOutcomesWithHttpInfoAsync(appId, outcomeNames, outcomeNames2, outcomeTimeRange, outcomePlatforms, outcomeAttribution, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View Outcomes View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutcomesData)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<OutcomesData>> GetOutcomesWithHttpInfoAsync(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetOutcomes");
            }

            // verify the required parameter 'outcomeNames' is set
            if (outcomeNames == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'outcomeNames' when calling DefaultApi->GetOutcomes");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_names", outcomeNames));
            if (outcomeNames2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_names[]", outcomeNames2));
            }
            if (outcomeTimeRange != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_time_range", outcomeTimeRange));
            }
            if (outcomePlatforms != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_platforms", outcomePlatforms));
            }
            if (outcomeAttribution != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_attribution", outcomeAttribution));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetOutcomes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutcomesData>("/apps/{app_id}/outcomes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOutcomes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View device View the details of an existing device in one of your OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Your app_id for this device</param>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="emailAuthHash">Email - Only required if you have enabled Identity Verification and device_type is email (11). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Player</returns>
        public Player GetPlayer(string appId, string playerId, string emailAuthHash = default(string), int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<Player> localVarResponse = GetPlayerWithHttpInfo(appId, playerId, emailAuthHash);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View device View the details of an existing device in one of your OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Your app_id for this device</param>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="emailAuthHash">Email - Only required if you have enabled Identity Verification and device_type is email (11). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Player</returns>
        public OneSignalApi.Client.ApiResponse<Player> GetPlayerWithHttpInfo(string appId, string playerId, string emailAuthHash = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetPlayer");
            }

            // verify the required parameter 'playerId' is set
            if (playerId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'playerId' when calling DefaultApi->GetPlayer");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player_id", OneSignalApi.Client.ClientUtils.ParameterToString(playerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));
            if (emailAuthHash != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "email_auth_hash", emailAuthHash));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetPlayer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Player>("/players/{player_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View device View the details of an existing device in one of your OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Your app_id for this device</param>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="emailAuthHash">Email - Only required if you have enabled Identity Verification and device_type is email (11). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Player</returns>
        public async System.Threading.Tasks.Task<Player> GetPlayerAsync(string appId, string playerId, string emailAuthHash = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<Player> localVarResponse = await GetPlayerWithHttpInfoAsync(appId, playerId, emailAuthHash, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View device View the details of an existing device in one of your OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Your app_id for this device</param>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="emailAuthHash">Email - Only required if you have enabled Identity Verification and device_type is email (11). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<Player>> GetPlayerWithHttpInfoAsync(string appId, string playerId, string emailAuthHash = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetPlayer");
            }

            // verify the required parameter 'playerId' is set
            if (playerId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'playerId' when calling DefaultApi->GetPlayer");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player_id", OneSignalApi.Client.ClientUtils.ParameterToString(playerId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));
            if (emailAuthHash != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "email_auth_hash", emailAuthHash));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetPlayer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Player>("/players/{player_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View devices View the details of multiple devices in one of your OneSignal apps Unavailable for Apps Over 80,000 Users For performance reasons, this method is not available for larger apps. Larger apps should use the CSV export API endpoint, which is much more performant. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view players from</param>
        /// <param name="limit">How many devices to return. Max is 300. Default is 300 (optional)</param>
        /// <param name="offset">Result offset. Default is 0. Results are sorted by id; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PlayerSlice</returns>
        public PlayerSlice GetPlayers(string appId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<PlayerSlice> localVarResponse = GetPlayersWithHttpInfo(appId, limit, offset);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View devices View the details of multiple devices in one of your OneSignal apps Unavailable for Apps Over 80,000 Users For performance reasons, this method is not available for larger apps. Larger apps should use the CSV export API endpoint, which is much more performant. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view players from</param>
        /// <param name="limit">How many devices to return. Max is 300. Default is 300 (optional)</param>
        /// <param name="offset">Result offset. Default is 0. Results are sorted by id; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PlayerSlice</returns>
        public OneSignalApi.Client.ApiResponse<PlayerSlice> GetPlayersWithHttpInfo(string appId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetPlayers");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetPlayers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PlayerSlice>("/players", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View devices View the details of multiple devices in one of your OneSignal apps Unavailable for Apps Over 80,000 Users For performance reasons, this method is not available for larger apps. Larger apps should use the CSV export API endpoint, which is much more performant. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view players from</param>
        /// <param name="limit">How many devices to return. Max is 300. Default is 300 (optional)</param>
        /// <param name="offset">Result offset. Default is 0. Results are sorted by id; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerSlice</returns>
        public async System.Threading.Tasks.Task<PlayerSlice> GetPlayersAsync(string appId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<PlayerSlice> localVarResponse = await GetPlayersWithHttpInfoAsync(appId, limit, offset, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View devices View the details of multiple devices in one of your OneSignal apps Unavailable for Apps Over 80,000 Users For performance reasons, this method is not available for larger apps. Larger apps should use the CSV export API endpoint, which is much more performant. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view players from</param>
        /// <param name="limit">How many devices to return. Max is 300. Default is 300 (optional)</param>
        /// <param name="offset">Result offset. Default is 0. Results are sorted by id; (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerSlice)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<PlayerSlice>> GetPlayersWithHttpInfoAsync(string appId, int? limit = default(int?), int? offset = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetPlayers");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetPlayers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PlayerSlice>("/players", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPlayers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 IdentifyUserByAlias(string appId, string aliasLabel, string aliasId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<InlineResponse200> localVarResponse = IdentifyUserByAliasWithHttpInfo(appId, aliasLabel, aliasId, userIdentityRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public OneSignalApi.Client.ApiResponse<InlineResponse200> IdentifyUserByAliasWithHttpInfo(string appId, string aliasLabel, string aliasId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->IdentifyUserByAlias");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->IdentifyUserByAlias");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->IdentifyUserByAlias");
            }

            // verify the required parameter 'userIdentityRequestBody' is set
            if (userIdentityRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'userIdentityRequestBody' when calling DefaultApi->IdentifyUserByAlias");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = userIdentityRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.IdentifyUserByAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<InlineResponse200>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/identity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentifyUserByAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> IdentifyUserByAliasAsync(string appId, string aliasLabel, string aliasId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<InlineResponse200> localVarResponse = await IdentifyUserByAliasWithHttpInfoAsync(appId, aliasLabel, aliasId, userIdentityRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<InlineResponse200>> IdentifyUserByAliasWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->IdentifyUserByAlias");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->IdentifyUserByAlias");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->IdentifyUserByAlias");
            }

            // verify the required parameter 'userIdentityRequestBody' is set
            if (userIdentityRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'userIdentityRequestBody' when calling DefaultApi->IdentifyUserByAlias");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = userIdentityRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.IdentifyUserByAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<InlineResponse200>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/identity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentifyUserByAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upserts one or more Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityResponse</returns>
        public UserIdentityResponse IdentifyUserBySubscriptionId(string appId, string subscriptionId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<UserIdentityResponse> localVarResponse = IdentifyUserBySubscriptionIdWithHttpInfo(appId, subscriptionId, userIdentityRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upserts one or more Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityResponse</returns>
        public OneSignalApi.Client.ApiResponse<UserIdentityResponse> IdentifyUserBySubscriptionIdWithHttpInfo(string appId, string subscriptionId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->IdentifyUserBySubscriptionId");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->IdentifyUserBySubscriptionId");
            }

            // verify the required parameter 'userIdentityRequestBody' is set
            if (userIdentityRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'userIdentityRequestBody' when calling DefaultApi->IdentifyUserBySubscriptionId");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = userIdentityRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.IdentifyUserBySubscriptionId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UserIdentityResponse>("/apps/{app_id}/subscriptions/{subscription_id}/user/identity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentifyUserBySubscriptionId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upserts one or more Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityResponse</returns>
        public async System.Threading.Tasks.Task<UserIdentityResponse> IdentifyUserBySubscriptionIdAsync(string appId, string subscriptionId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<UserIdentityResponse> localVarResponse = await IdentifyUserBySubscriptionIdWithHttpInfoAsync(appId, subscriptionId, userIdentityRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upserts one or more Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<UserIdentityResponse>> IdentifyUserBySubscriptionIdWithHttpInfoAsync(string appId, string subscriptionId, UserIdentityRequestBody userIdentityRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->IdentifyUserBySubscriptionId");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->IdentifyUserBySubscriptionId");
            }

            // verify the required parameter 'userIdentityRequestBody' is set
            if (userIdentityRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'userIdentityRequestBody' when calling DefaultApi->IdentifyUserBySubscriptionId");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = userIdentityRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.IdentifyUserBySubscriptionId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UserIdentityResponse>("/apps/{app_id}/subscriptions/{subscription_id}/user/identity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IdentifyUserBySubscriptionId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Transfers this Subscription to the User identified by the identity in the payload.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityResponse</returns>
        public UserIdentityResponse TransferSubscription(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<UserIdentityResponse> localVarResponse = TransferSubscriptionWithHttpInfo(appId, subscriptionId, transferSubscriptionRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Transfers this Subscription to the User identified by the identity in the payload.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityResponse</returns>
        public OneSignalApi.Client.ApiResponse<UserIdentityResponse> TransferSubscriptionWithHttpInfo(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->TransferSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->TransferSubscription");
            }

            // verify the required parameter 'transferSubscriptionRequestBody' is set
            if (transferSubscriptionRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'transferSubscriptionRequestBody' when calling DefaultApi->TransferSubscription");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = transferSubscriptionRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.TransferSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UserIdentityResponse>("/apps/{app_id}/subscriptions/{subscription_id}/owner", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Transfers this Subscription to the User identified by the identity in the payload.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityResponse</returns>
        public async System.Threading.Tasks.Task<UserIdentityResponse> TransferSubscriptionAsync(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<UserIdentityResponse> localVarResponse = await TransferSubscriptionWithHttpInfoAsync(appId, subscriptionId, transferSubscriptionRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Transfers this Subscription to the User identified by the identity in the payload.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<UserIdentityResponse>> TransferSubscriptionWithHttpInfoAsync(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->TransferSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->TransferSubscription");
            }

            // verify the required parameter 'transferSubscriptionRequestBody' is set
            if (transferSubscriptionRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'transferSubscriptionRequestBody' when calling DefaultApi->TransferSubscription");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = transferSubscriptionRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.TransferSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UserIdentityResponse>("/apps/{app_id}/subscriptions/{subscription_id}/owner", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an app Updates the name or configuration settings of an existing OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>App</returns>
        public App UpdateApp(string appId, App app, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<App> localVarResponse = UpdateAppWithHttpInfo(appId, app);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an app Updates the name or configuration settings of an existing OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of App</returns>
        public OneSignalApi.Client.ApiResponse<App> UpdateAppWithHttpInfo(string appId, App app, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateApp");
            }

            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'app' when calling DefaultApi->UpdateApp");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = app;

            localVarRequestOptions.Operation = "DefaultApi.UpdateApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (user_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<App>("/apps/{app_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an app Updates the name or configuration settings of an existing OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        public async System.Threading.Tasks.Task<App> UpdateAppAsync(string appId, App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<App> localVarResponse = await UpdateAppWithHttpInfoAsync(appId, app, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an app Updates the name or configuration settings of an existing OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<App>> UpdateAppWithHttpInfoAsync(string appId, App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateApp");
            }

            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'app' when calling DefaultApi->UpdateApp");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = app;

            localVarRequestOptions.Operation = "DefaultApi.UpdateApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (user_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<App>("/apps/{app_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Live Activity via Push Updates a specified live activity.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateLiveActivitySuccessResponse</returns>
        public UpdateLiveActivitySuccessResponse UpdateLiveActivity(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<UpdateLiveActivitySuccessResponse> localVarResponse = UpdateLiveActivityWithHttpInfo(appId, activityId, updateLiveActivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Live Activity via Push Updates a specified live activity.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateLiveActivitySuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<UpdateLiveActivitySuccessResponse> UpdateLiveActivityWithHttpInfo(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateLiveActivity");
            }

            // verify the required parameter 'activityId' is set
            if (activityId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'activityId' when calling DefaultApi->UpdateLiveActivity");
            }

            // verify the required parameter 'updateLiveActivityRequest' is set
            if (updateLiveActivityRequest == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'updateLiveActivityRequest' when calling DefaultApi->UpdateLiveActivity");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("activity_id", OneSignalApi.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.Data = updateLiveActivityRequest;

            localVarRequestOptions.Operation = "DefaultApi.UpdateLiveActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateLiveActivitySuccessResponse>("/apps/{app_id}/live_activities/{activity_id}/notifications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLiveActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Live Activity via Push Updates a specified live activity.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateLiveActivitySuccessResponse</returns>
        public async System.Threading.Tasks.Task<UpdateLiveActivitySuccessResponse> UpdateLiveActivityAsync(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<UpdateLiveActivitySuccessResponse> localVarResponse = await UpdateLiveActivityWithHttpInfoAsync(appId, activityId, updateLiveActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Live Activity via Push Updates a specified live activity.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateLiveActivitySuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<UpdateLiveActivitySuccessResponse>> UpdateLiveActivityWithHttpInfoAsync(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateLiveActivity");
            }

            // verify the required parameter 'activityId' is set
            if (activityId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'activityId' when calling DefaultApi->UpdateLiveActivity");
            }

            // verify the required parameter 'updateLiveActivityRequest' is set
            if (updateLiveActivityRequest == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'updateLiveActivityRequest' when calling DefaultApi->UpdateLiveActivity");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("activity_id", OneSignalApi.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.Data = updateLiveActivityRequest;

            localVarRequestOptions.Operation = "DefaultApi.UpdateLiveActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateLiveActivitySuccessResponse>("/apps/{app_id}/live_activities/{activity_id}/notifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLiveActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit device Update an existing device in one of your OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatePlayerSuccessResponse</returns>
        public UpdatePlayerSuccessResponse UpdatePlayer(string playerId, Player player, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<UpdatePlayerSuccessResponse> localVarResponse = UpdatePlayerWithHttpInfo(playerId, player);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit device Update an existing device in one of your OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatePlayerSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<UpdatePlayerSuccessResponse> UpdatePlayerWithHttpInfo(string playerId, Player player, int operationIndex = 0)
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'playerId' when calling DefaultApi->UpdatePlayer");
            }

            // verify the required parameter 'player' is set
            if (player == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'player' when calling DefaultApi->UpdatePlayer");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player_id", OneSignalApi.Client.ClientUtils.ParameterToString(playerId)); // path parameter
            localVarRequestOptions.Data = player;

            localVarRequestOptions.Operation = "DefaultApi.UpdatePlayer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdatePlayerSuccessResponse>("/players/{player_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit device Update an existing device in one of your OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePlayerSuccessResponse</returns>
        public async System.Threading.Tasks.Task<UpdatePlayerSuccessResponse> UpdatePlayerAsync(string playerId, Player player, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<UpdatePlayerSuccessResponse> localVarResponse = await UpdatePlayerWithHttpInfoAsync(playerId, player, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit device Update an existing device in one of your OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerId">Player&#39;s OneSignal ID</param>
        /// <param name="player"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePlayerSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<UpdatePlayerSuccessResponse>> UpdatePlayerWithHttpInfoAsync(string playerId, Player player, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'playerId' is set
            if (playerId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'playerId' when calling DefaultApi->UpdatePlayer");
            }

            // verify the required parameter 'player' is set
            if (player == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'player' when calling DefaultApi->UpdatePlayer");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("player_id", OneSignalApi.Client.ClientUtils.ParameterToString(playerId)); // path parameter
            localVarRequestOptions.Data = player;

            localVarRequestOptions.Operation = "DefaultApi.UpdatePlayer";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdatePlayerSuccessResponse>("/players/{player_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlayer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit tags with external user id Update an existing device&#39;s tags in one of your OneSignal apps using the External User ID. Warning - Android SDK Data Synchronization Tags added through the Android SDK tagging methods may not update if using the API to change or update the same tag. For example, if you use SDK method sendTag(\&quot;key\&quot;, \&quot;value1\&quot;) then update the tag value to \&quot;value2\&quot; with this API endpoint. You will not be able to set the value back to \&quot;value1\&quot; through the SDK, you will need to change it to something different through the SDK to be reset. Recommendations if using this Endpoint on Android Mobile Apps: 1 - Do not use the same tag keys for SDK and API updates 2 - If you want to use the same key for both SDK and API updates, call the SDK getTags method first to update the device&#39;s tags. This is only applicable on the Android Mobile App SDKs. &amp;#128216; Deleting Tags To delete a tag, include its key and set its value to blank. Omitting a key/value will not delete it. For example, if I wanted to delete two existing tags rank and category while simultaneously adding a new tag class, the tags JSON would look like the following: \&quot;tags\&quot;: {    \&quot;rank\&quot;: \&quot;\&quot;,    \&quot;category\&quot;: \&quot;\&quot;,    \&quot;class\&quot;: \&quot;my_new_value\&quot; } 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID the user record is found under.</param>
        /// <param name="externalUserId">The External User ID mapped to teh device record in OneSignal.  Must be actively set on the device to be updated.</param>
        /// <param name="updatePlayerTagsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdatePlayerTagsSuccessResponse</returns>
        public UpdatePlayerTagsSuccessResponse UpdatePlayerTags(string appId, string externalUserId, UpdatePlayerTagsRequestBody updatePlayerTagsRequestBody = default(UpdatePlayerTagsRequestBody), int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<UpdatePlayerTagsSuccessResponse> localVarResponse = UpdatePlayerTagsWithHttpInfo(appId, externalUserId, updatePlayerTagsRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit tags with external user id Update an existing device&#39;s tags in one of your OneSignal apps using the External User ID. Warning - Android SDK Data Synchronization Tags added through the Android SDK tagging methods may not update if using the API to change or update the same tag. For example, if you use SDK method sendTag(\&quot;key\&quot;, \&quot;value1\&quot;) then update the tag value to \&quot;value2\&quot; with this API endpoint. You will not be able to set the value back to \&quot;value1\&quot; through the SDK, you will need to change it to something different through the SDK to be reset. Recommendations if using this Endpoint on Android Mobile Apps: 1 - Do not use the same tag keys for SDK and API updates 2 - If you want to use the same key for both SDK and API updates, call the SDK getTags method first to update the device&#39;s tags. This is only applicable on the Android Mobile App SDKs. &amp;#128216; Deleting Tags To delete a tag, include its key and set its value to blank. Omitting a key/value will not delete it. For example, if I wanted to delete two existing tags rank and category while simultaneously adding a new tag class, the tags JSON would look like the following: \&quot;tags\&quot;: {    \&quot;rank\&quot;: \&quot;\&quot;,    \&quot;category\&quot;: \&quot;\&quot;,    \&quot;class\&quot;: \&quot;my_new_value\&quot; } 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID the user record is found under.</param>
        /// <param name="externalUserId">The External User ID mapped to teh device record in OneSignal.  Must be actively set on the device to be updated.</param>
        /// <param name="updatePlayerTagsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdatePlayerTagsSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<UpdatePlayerTagsSuccessResponse> UpdatePlayerTagsWithHttpInfo(string appId, string externalUserId, UpdatePlayerTagsRequestBody updatePlayerTagsRequestBody = default(UpdatePlayerTagsRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdatePlayerTags");
            }

            // verify the required parameter 'externalUserId' is set
            if (externalUserId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'externalUserId' when calling DefaultApi->UpdatePlayerTags");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("external_user_id", OneSignalApi.Client.ClientUtils.ParameterToString(externalUserId)); // path parameter
            localVarRequestOptions.Data = updatePlayerTagsRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.UpdatePlayerTags";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdatePlayerTagsSuccessResponse>("/apps/{app_id}/users/{external_user_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlayerTags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit tags with external user id Update an existing device&#39;s tags in one of your OneSignal apps using the External User ID. Warning - Android SDK Data Synchronization Tags added through the Android SDK tagging methods may not update if using the API to change or update the same tag. For example, if you use SDK method sendTag(\&quot;key\&quot;, \&quot;value1\&quot;) then update the tag value to \&quot;value2\&quot; with this API endpoint. You will not be able to set the value back to \&quot;value1\&quot; through the SDK, you will need to change it to something different through the SDK to be reset. Recommendations if using this Endpoint on Android Mobile Apps: 1 - Do not use the same tag keys for SDK and API updates 2 - If you want to use the same key for both SDK and API updates, call the SDK getTags method first to update the device&#39;s tags. This is only applicable on the Android Mobile App SDKs. &amp;#128216; Deleting Tags To delete a tag, include its key and set its value to blank. Omitting a key/value will not delete it. For example, if I wanted to delete two existing tags rank and category while simultaneously adding a new tag class, the tags JSON would look like the following: \&quot;tags\&quot;: {    \&quot;rank\&quot;: \&quot;\&quot;,    \&quot;category\&quot;: \&quot;\&quot;,    \&quot;class\&quot;: \&quot;my_new_value\&quot; } 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID the user record is found under.</param>
        /// <param name="externalUserId">The External User ID mapped to teh device record in OneSignal.  Must be actively set on the device to be updated.</param>
        /// <param name="updatePlayerTagsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdatePlayerTagsSuccessResponse</returns>
        public async System.Threading.Tasks.Task<UpdatePlayerTagsSuccessResponse> UpdatePlayerTagsAsync(string appId, string externalUserId, UpdatePlayerTagsRequestBody updatePlayerTagsRequestBody = default(UpdatePlayerTagsRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<UpdatePlayerTagsSuccessResponse> localVarResponse = await UpdatePlayerTagsWithHttpInfoAsync(appId, externalUserId, updatePlayerTagsRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit tags with external user id Update an existing device&#39;s tags in one of your OneSignal apps using the External User ID. Warning - Android SDK Data Synchronization Tags added through the Android SDK tagging methods may not update if using the API to change or update the same tag. For example, if you use SDK method sendTag(\&quot;key\&quot;, \&quot;value1\&quot;) then update the tag value to \&quot;value2\&quot; with this API endpoint. You will not be able to set the value back to \&quot;value1\&quot; through the SDK, you will need to change it to something different through the SDK to be reset. Recommendations if using this Endpoint on Android Mobile Apps: 1 - Do not use the same tag keys for SDK and API updates 2 - If you want to use the same key for both SDK and API updates, call the SDK getTags method first to update the device&#39;s tags. This is only applicable on the Android Mobile App SDKs. &amp;#128216; Deleting Tags To delete a tag, include its key and set its value to blank. Omitting a key/value will not delete it. For example, if I wanted to delete two existing tags rank and category while simultaneously adding a new tag class, the tags JSON would look like the following: \&quot;tags\&quot;: {    \&quot;rank\&quot;: \&quot;\&quot;,    \&quot;category\&quot;: \&quot;\&quot;,    \&quot;class\&quot;: \&quot;my_new_value\&quot; } 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID the user record is found under.</param>
        /// <param name="externalUserId">The External User ID mapped to teh device record in OneSignal.  Must be actively set on the device to be updated.</param>
        /// <param name="updatePlayerTagsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdatePlayerTagsSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<UpdatePlayerTagsSuccessResponse>> UpdatePlayerTagsWithHttpInfoAsync(string appId, string externalUserId, UpdatePlayerTagsRequestBody updatePlayerTagsRequestBody = default(UpdatePlayerTagsRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdatePlayerTags");
            }

            // verify the required parameter 'externalUserId' is set
            if (externalUserId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'externalUserId' when calling DefaultApi->UpdatePlayerTags");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("external_user_id", OneSignalApi.Client.ClientUtils.ParameterToString(externalUserId)); // path parameter
            localVarRequestOptions.Data = updatePlayerTagsRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.UpdatePlayerTags";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdatePlayerTagsSuccessResponse>("/apps/{app_id}/users/{external_user_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdatePlayerTags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates an existing Subscription’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateSubscription(string appId, string subscriptionId, UpdateSubscriptionRequestBody updateSubscriptionRequestBody, int operationIndex = 0)
        {
            UpdateSubscriptionWithHttpInfo(appId, subscriptionId, updateSubscriptionRequestBody);
        }

        /// <summary>
        ///  Updates an existing Subscription’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OneSignalApi.Client.ApiResponse<Object> UpdateSubscriptionWithHttpInfo(string appId, string subscriptionId, UpdateSubscriptionRequestBody updateSubscriptionRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->UpdateSubscription");
            }

            // verify the required parameter 'updateSubscriptionRequestBody' is set
            if (updateSubscriptionRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'updateSubscriptionRequestBody' when calling DefaultApi->UpdateSubscription");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = updateSubscriptionRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.UpdateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/apps/{app_id}/subscriptions/{subscription_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates an existing Subscription’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSubscriptionAsync(string appId, string subscriptionId, UpdateSubscriptionRequestBody updateSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateSubscriptionWithHttpInfoAsync(appId, subscriptionId, updateSubscriptionRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Updates an existing Subscription’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="updateSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<Object>> UpdateSubscriptionWithHttpInfoAsync(string appId, string subscriptionId, UpdateSubscriptionRequestBody updateSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->UpdateSubscription");
            }

            // verify the required parameter 'updateSubscriptionRequestBody' is set
            if (updateSubscriptionRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'updateSubscriptionRequestBody' when calling DefaultApi->UpdateSubscription");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = updateSubscriptionRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.UpdateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/apps/{app_id}/subscriptions/{subscription_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates an existing User’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InlineResponse202</returns>
        public InlineResponse202 UpdateUser(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<InlineResponse202> localVarResponse = UpdateUserWithHttpInfo(appId, aliasLabel, aliasId, updateUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing User’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InlineResponse202</returns>
        public OneSignalApi.Client.ApiResponse<InlineResponse202> UpdateUserWithHttpInfo(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateUser");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->UpdateUser");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->UpdateUser");
            }

            // verify the required parameter 'updateUserRequest' is set
            if (updateUserRequest == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'updateUserRequest' when calling DefaultApi->UpdateUser");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = updateUserRequest;

            localVarRequestOptions.Operation = "DefaultApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<InlineResponse202>("/apps/{app_id}/users/by/{alias_label}/{alias_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates an existing User’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InlineResponse202</returns>
        public async System.Threading.Tasks.Task<InlineResponse202> UpdateUserAsync(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<InlineResponse202> localVarResponse = await UpdateUserWithHttpInfoAsync(appId, aliasLabel, aliasId, updateUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing User’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InlineResponse202)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<InlineResponse202>> UpdateUserWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateUser");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->UpdateUser");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->UpdateUser");
            }

            // verify the required parameter 'updateUserRequest' is set
            if (updateUserRequest == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'updateUserRequest' when calling DefaultApi->UpdateUser");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = updateUserRequest;

            localVarRequestOptions.Operation = "DefaultApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (app_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<InlineResponse202>("/apps/{app_id}/users/by/{alias_label}/{alias_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
