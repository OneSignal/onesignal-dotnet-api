/*
 * OneSignal
 *
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: devrel@onesignal.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using OneSignalApi.Client;
using OneSignalApi.Model;

namespace OneSignalApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Stop a scheduled or currently outgoing notification
        /// </summary>
        /// <remarks>
        /// Used to stop a scheduled or currently outgoing notification
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenericSuccessBoolResponse</returns>
        GenericSuccessBoolResponse CancelNotification(string appId, string notificationId, int operationIndex = 0);

        /// <summary>
        /// Stop a scheduled or currently outgoing notification
        /// </summary>
        /// <remarks>
        /// Used to stop a scheduled or currently outgoing notification
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenericSuccessBoolResponse</returns>
        ApiResponse<GenericSuccessBoolResponse> CancelNotificationWithHttpInfo(string appId, string notificationId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityBody</returns>
        UserIdentityBody CreateAlias(string appId, string aliasLabel, string aliasId, UserIdentityBody userIdentityBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityBody</returns>
        ApiResponse<UserIdentityBody> CreateAliasWithHttpInfo(string appId, string aliasLabel, string aliasId, UserIdentityBody userIdentityBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityBody</returns>
        UserIdentityBody CreateAliasBySubscription(string appId, string subscriptionId, UserIdentityBody userIdentityBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityBody</returns>
        ApiResponse<UserIdentityBody> CreateAliasBySubscriptionWithHttpInfo(string appId, string subscriptionId, UserIdentityBody userIdentityBody, int operationIndex = 0);
        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// Creates a new OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>App</returns>
        App CreateApp(App app, int operationIndex = 0);

        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// Creates a new OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of App</returns>
        ApiResponse<App> CreateAppWithHttpInfo(App app, int operationIndex = 0);
        /// <summary>
        /// Create notification
        /// </summary>
        /// <remarks>
        /// Sends notifications to your users 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateNotificationSuccessResponse</returns>
        CreateNotificationSuccessResponse CreateNotification(Notification notification, int operationIndex = 0);

        /// <summary>
        /// Create notification
        /// </summary>
        /// <remarks>
        /// Sends notifications to your users 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateNotificationSuccessResponse</returns>
        ApiResponse<CreateNotificationSuccessResponse> CreateNotificationWithHttpInfo(Notification notification, int operationIndex = 0);
        /// <summary>
        /// Create Segment
        /// </summary>
        /// <remarks>
        /// Create a segment visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segment endpoint and re-create it with this endpoint to edit. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSegmentSuccessResponse</returns>
        CreateSegmentSuccessResponse CreateSegment(string appId, Segment segment = default(Segment), int operationIndex = 0);

        /// <summary>
        /// Create Segment
        /// </summary>
        /// <remarks>
        /// Create a segment visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segment endpoint and re-create it with this endpoint to edit. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSegmentSuccessResponse</returns>
        ApiResponse<CreateSegmentSuccessResponse> CreateSegmentWithHttpInfo(string appId, Segment segment = default(Segment), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionBody</returns>
        SubscriptionBody CreateSubscription(string appId, string aliasLabel, string aliasId, SubscriptionBody subscriptionBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionBody</returns>
        ApiResponse<SubscriptionBody> CreateSubscriptionWithHttpInfo(string appId, string aliasLabel, string aliasId, SubscriptionBody subscriptionBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User CreateUser(string appId, User user, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> CreateUserWithHttpInfo(string appId, User user, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an alias by alias label
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityBody</returns>
        UserIdentityBody DeleteAlias(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an alias by alias label
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityBody</returns>
        ApiResponse<UserIdentityBody> DeleteAliasWithHttpInfo(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0);
        /// <summary>
        /// Delete Segment
        /// </summary>
        /// <remarks>
        /// Delete a segment (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenericSuccessBoolResponse</returns>
        GenericSuccessBoolResponse DeleteSegment(string appId, string segmentId, int operationIndex = 0);

        /// <summary>
        /// Delete Segment
        /// </summary>
        /// <remarks>
        /// Delete a segment (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenericSuccessBoolResponse</returns>
        ApiResponse<GenericSuccessBoolResponse> DeleteSegmentWithHttpInfo(string appId, string segmentId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the Subscription.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteSubscription(string appId, string subscriptionId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the Subscription.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSubscriptionWithHttpInfo(string appId, string subscriptionId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteUser(string appId, string aliasLabel, string aliasId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserWithHttpInfo(string appId, string aliasLabel, string aliasId, int operationIndex = 0);
        /// <summary>
        /// Export CSV of Events
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportEventsSuccessResponse</returns>
        ExportEventsSuccessResponse ExportEvents(string notificationId, string appId, int operationIndex = 0);

        /// <summary>
        /// Export CSV of Events
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportEventsSuccessResponse</returns>
        ApiResponse<ExportEventsSuccessResponse> ExportEventsWithHttpInfo(string notificationId, string appId, int operationIndex = 0);
        /// <summary>
        /// Export CSV of Subscriptions
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportSubscriptionsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportSubscriptionsSuccessResponse</returns>
        ExportSubscriptionsSuccessResponse ExportSubscriptions(string appId, ExportSubscriptionsRequestBody exportSubscriptionsRequestBody = default(ExportSubscriptionsRequestBody), int operationIndex = 0);

        /// <summary>
        /// Export CSV of Subscriptions
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportSubscriptionsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportSubscriptionsSuccessResponse</returns>
        ApiResponse<ExportSubscriptionsSuccessResponse> ExportSubscriptionsWithHttpInfo(string appId, ExportSubscriptionsRequestBody exportSubscriptionsRequestBody = default(ExportSubscriptionsRequestBody), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityBody</returns>
        UserIdentityBody GetAliases(string appId, string aliasLabel, string aliasId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityBody</returns>
        ApiResponse<UserIdentityBody> GetAliasesWithHttpInfo(string appId, string aliasLabel, string aliasId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityBody</returns>
        UserIdentityBody GetAliasesBySubscription(string appId, string subscriptionId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityBody</returns>
        ApiResponse<UserIdentityBody> GetAliasesBySubscriptionWithHttpInfo(string appId, string subscriptionId, int operationIndex = 0);
        /// <summary>
        /// View an app
        /// </summary>
        /// <remarks>
        /// View the details of a single OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>App</returns>
        App GetApp(string appId, int operationIndex = 0);

        /// <summary>
        /// View an app
        /// </summary>
        /// <remarks>
        /// View the details of a single OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of App</returns>
        ApiResponse<App> GetAppWithHttpInfo(string appId, int operationIndex = 0);
        /// <summary>
        /// View apps
        /// </summary>
        /// <remarks>
        /// View the details of all of your current OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;App&gt;</returns>
        List<App> GetApps(int operationIndex = 0);

        /// <summary>
        /// View apps
        /// </summary>
        /// <remarks>
        /// View the details of all of your current OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;App&gt;</returns>
        ApiResponse<List<App>> GetAppsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// View notification
        /// </summary>
        /// <remarks>
        /// View the details of a single notification and outcomes associated with it
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationWithMeta</returns>
        NotificationWithMeta GetNotification(string appId, string notificationId, int operationIndex = 0);

        /// <summary>
        /// View notification
        /// </summary>
        /// <remarks>
        /// View the details of a single notification and outcomes associated with it
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationWithMeta</returns>
        ApiResponse<NotificationWithMeta> GetNotificationWithHttpInfo(string appId, string notificationId, int operationIndex = 0);
        /// <summary>
        /// Notification History
        /// </summary>
        /// <remarks>
        /// -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationHistoryRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationHistorySuccessResponse</returns>
        NotificationHistorySuccessResponse GetNotificationHistory(string notificationId, GetNotificationHistoryRequestBody getNotificationHistoryRequestBody, int operationIndex = 0);

        /// <summary>
        /// Notification History
        /// </summary>
        /// <remarks>
        /// -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationHistoryRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationHistorySuccessResponse</returns>
        ApiResponse<NotificationHistorySuccessResponse> GetNotificationHistoryWithHttpInfo(string notificationId, GetNotificationHistoryRequestBody getNotificationHistoryRequestBody, int operationIndex = 0);
        /// <summary>
        /// View notifications
        /// </summary>
        /// <remarks>
        /// View the details of multiple notifications
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationSlice</returns>
        NotificationSlice GetNotifications(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0);

        /// <summary>
        /// View notifications
        /// </summary>
        /// <remarks>
        /// View the details of multiple notifications
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationSlice</returns>
        ApiResponse<NotificationSlice> GetNotificationsWithHttpInfo(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0);
        /// <summary>
        /// View Outcomes
        /// </summary>
        /// <remarks>
        /// View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutcomesData</returns>
        OutcomesData GetOutcomes(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0);

        /// <summary>
        /// View Outcomes
        /// </summary>
        /// <remarks>
        /// View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutcomesData</returns>
        ApiResponse<OutcomesData> GetOutcomesWithHttpInfo(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0);
        /// <summary>
        /// Get Segments
        /// </summary>
        /// <remarks>
        /// Returns an array of segments from an app.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="offset">Segments are listed in ascending order of created_at date. offset will omit that number of segments from the beginning of the list. Eg offset 5, will remove the 5 earliest created Segments. (optional)</param>
        /// <param name="limit">The amount of Segments in the response. Maximum 300. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSegmentsSuccessResponse</returns>
        GetSegmentsSuccessResponse GetSegments(string appId, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Segments
        /// </summary>
        /// <remarks>
        /// Returns an array of segments from an app.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="offset">Segments are listed in ascending order of created_at date. offset will omit that number of segments from the beginning of the list. Eg offset 5, will remove the 5 earliest created Segments. (optional)</param>
        /// <param name="limit">The amount of Segments in the response. Maximum 300. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSegmentsSuccessResponse</returns>
        ApiResponse<GetSegmentsSuccessResponse> GetSegmentsWithHttpInfo(string appId, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the User’s properties, Aliases, and Subscriptions.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        User GetUser(string appId, string aliasLabel, string aliasId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the User’s properties, Aliases, and Subscriptions.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> GetUserWithHttpInfo(string appId, string aliasLabel, string aliasId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers this Subscription to the User identified by the identity in the payload.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityBody</returns>
        UserIdentityBody TransferSubscription(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers this Subscription to the User identified by the identity in the payload.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityBody</returns>
        ApiResponse<UserIdentityBody> TransferSubscriptionWithHttpInfo(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0);
        /// <summary>
        /// Unsubscribe with token
        /// </summary>
        /// <remarks>
        /// Unsubscribe an email with a token when using your own custom email unsubscribe landing page
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="notificationId">The id of the message found in the creation notification POST response, View Notifications GET response, or URL within the Message Report.</param>
        /// <param name="token">The unsubscribe token that is generated via liquid syntax in {{subscription.unsubscribe_token}} when personalizing an email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenericSuccessBoolResponse</returns>
        GenericSuccessBoolResponse UnsubscribeEmailWithToken(string appId, string notificationId, string token, int operationIndex = 0);

        /// <summary>
        /// Unsubscribe with token
        /// </summary>
        /// <remarks>
        /// Unsubscribe an email with a token when using your own custom email unsubscribe landing page
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="notificationId">The id of the message found in the creation notification POST response, View Notifications GET response, or URL within the Message Report.</param>
        /// <param name="token">The unsubscribe token that is generated via liquid syntax in {{subscription.unsubscribe_token}} when personalizing an email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenericSuccessBoolResponse</returns>
        ApiResponse<GenericSuccessBoolResponse> UnsubscribeEmailWithTokenWithHttpInfo(string appId, string notificationId, string token, int operationIndex = 0);
        /// <summary>
        /// Update an app
        /// </summary>
        /// <remarks>
        /// Updates the name or configuration settings of an existing OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>App</returns>
        App UpdateApp(string appId, App app, int operationIndex = 0);

        /// <summary>
        /// Update an app
        /// </summary>
        /// <remarks>
        /// Updates the name or configuration settings of an existing OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of App</returns>
        ApiResponse<App> UpdateAppWithHttpInfo(string appId, App app, int operationIndex = 0);
        /// <summary>
        /// Update a Live Activity via Push
        /// </summary>
        /// <remarks>
        /// Updates a specified live activity.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateLiveActivitySuccessResponse</returns>
        UpdateLiveActivitySuccessResponse UpdateLiveActivity(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0);

        /// <summary>
        /// Update a Live Activity via Push
        /// </summary>
        /// <remarks>
        /// Updates a specified live activity.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateLiveActivitySuccessResponse</returns>
        ApiResponse<UpdateLiveActivitySuccessResponse> UpdateLiveActivityWithHttpInfo(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing Subscription’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UpdateSubscription(string appId, string subscriptionId, SubscriptionBody subscriptionBody, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing Subscription’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateSubscriptionWithHttpInfo(string appId, string subscriptionId, SubscriptionBody subscriptionBody, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing User’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropertiesBody</returns>
        PropertiesBody UpdateUser(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing User’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropertiesBody</returns>
        ApiResponse<PropertiesBody> UpdateUserWithHttpInfo(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Stop a scheduled or currently outgoing notification
        /// </summary>
        /// <remarks>
        /// Used to stop a scheduled or currently outgoing notification
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenericSuccessBoolResponse</returns>
        System.Threading.Tasks.Task<GenericSuccessBoolResponse> CancelNotificationAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Stop a scheduled or currently outgoing notification
        /// </summary>
        /// <remarks>
        /// Used to stop a scheduled or currently outgoing notification
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenericSuccessBoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericSuccessBoolResponse>> CancelNotificationWithHttpInfoAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityBody</returns>
        System.Threading.Tasks.Task<UserIdentityBody> CreateAliasAsync(string appId, string aliasLabel, string aliasId, UserIdentityBody userIdentityBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserIdentityBody>> CreateAliasWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, UserIdentityBody userIdentityBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityBody</returns>
        System.Threading.Tasks.Task<UserIdentityBody> CreateAliasBySubscriptionAsync(string appId, string subscriptionId, UserIdentityBody userIdentityBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upserts one or more Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserIdentityBody>> CreateAliasBySubscriptionWithHttpInfoAsync(string appId, string subscriptionId, UserIdentityBody userIdentityBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// Creates a new OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        System.Threading.Tasks.Task<App> CreateAppAsync(App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create an app
        /// </summary>
        /// <remarks>
        /// Creates a new OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        System.Threading.Tasks.Task<ApiResponse<App>> CreateAppWithHttpInfoAsync(App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create notification
        /// </summary>
        /// <remarks>
        /// Sends notifications to your users 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNotificationSuccessResponse</returns>
        System.Threading.Tasks.Task<CreateNotificationSuccessResponse> CreateNotificationAsync(Notification notification, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create notification
        /// </summary>
        /// <remarks>
        /// Sends notifications to your users 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNotificationSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateNotificationSuccessResponse>> CreateNotificationWithHttpInfoAsync(Notification notification, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Segment
        /// </summary>
        /// <remarks>
        /// Create a segment visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segment endpoint and re-create it with this endpoint to edit. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSegmentSuccessResponse</returns>
        System.Threading.Tasks.Task<CreateSegmentSuccessResponse> CreateSegmentAsync(string appId, Segment segment = default(Segment), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Segment
        /// </summary>
        /// <remarks>
        /// Create a segment visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segment endpoint and re-create it with this endpoint to edit. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSegmentSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSegmentSuccessResponse>> CreateSegmentWithHttpInfoAsync(string appId, Segment segment = default(Segment), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionBody</returns>
        System.Threading.Tasks.Task<SubscriptionBody> CreateSubscriptionAsync(string appId, string aliasLabel, string aliasId, SubscriptionBody subscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubscriptionBody>> CreateSubscriptionWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, SubscriptionBody subscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> CreateUserAsync(string appId, User user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> CreateUserWithHttpInfoAsync(string appId, User user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an alias by alias label
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityBody</returns>
        System.Threading.Tasks.Task<UserIdentityBody> DeleteAliasAsync(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes an alias by alias label
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserIdentityBody>> DeleteAliasWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Segment
        /// </summary>
        /// <remarks>
        /// Delete a segment (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenericSuccessBoolResponse</returns>
        System.Threading.Tasks.Task<GenericSuccessBoolResponse> DeleteSegmentAsync(string appId, string segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Segment
        /// </summary>
        /// <remarks>
        /// Delete a segment (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenericSuccessBoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericSuccessBoolResponse>> DeleteSegmentWithHttpInfoAsync(string appId, string segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the Subscription.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSubscriptionAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes the Subscription.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSubscriptionWithHttpInfoAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export CSV of Events
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportEventsSuccessResponse</returns>
        System.Threading.Tasks.Task<ExportEventsSuccessResponse> ExportEventsAsync(string notificationId, string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export CSV of Events
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportEventsSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExportEventsSuccessResponse>> ExportEventsWithHttpInfoAsync(string notificationId, string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export CSV of Subscriptions
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportSubscriptionsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportSubscriptionsSuccessResponse</returns>
        System.Threading.Tasks.Task<ExportSubscriptionsSuccessResponse> ExportSubscriptionsAsync(string appId, ExportSubscriptionsRequestBody exportSubscriptionsRequestBody = default(ExportSubscriptionsRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export CSV of Subscriptions
        /// </summary>
        /// <remarks>
        /// Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportSubscriptionsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportSubscriptionsSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExportSubscriptionsSuccessResponse>> ExportSubscriptionsWithHttpInfoAsync(string appId, ExportSubscriptionsRequestBody exportSubscriptionsRequestBody = default(ExportSubscriptionsRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityBody</returns>
        System.Threading.Tasks.Task<UserIdentityBody> GetAliasesAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserIdentityBody>> GetAliasesWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityBody</returns>
        System.Threading.Tasks.Task<UserIdentityBody> GetAliasesBySubscriptionAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lists all Aliases for the User identified by :subscription_id.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserIdentityBody>> GetAliasesBySubscriptionWithHttpInfoAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View an app
        /// </summary>
        /// <remarks>
        /// View the details of a single OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        System.Threading.Tasks.Task<App> GetAppAsync(string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View an app
        /// </summary>
        /// <remarks>
        /// View the details of a single OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        System.Threading.Tasks.Task<ApiResponse<App>> GetAppWithHttpInfoAsync(string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View apps
        /// </summary>
        /// <remarks>
        /// View the details of all of your current OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;App&gt;</returns>
        System.Threading.Tasks.Task<List<App>> GetAppsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View apps
        /// </summary>
        /// <remarks>
        /// View the details of all of your current OneSignal apps
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;App&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<App>>> GetAppsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View notification
        /// </summary>
        /// <remarks>
        /// View the details of a single notification and outcomes associated with it
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationWithMeta</returns>
        System.Threading.Tasks.Task<NotificationWithMeta> GetNotificationAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View notification
        /// </summary>
        /// <remarks>
        /// View the details of a single notification and outcomes associated with it
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationWithMeta)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationWithMeta>> GetNotificationWithHttpInfoAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Notification History
        /// </summary>
        /// <remarks>
        /// -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationHistoryRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationHistorySuccessResponse</returns>
        System.Threading.Tasks.Task<NotificationHistorySuccessResponse> GetNotificationHistoryAsync(string notificationId, GetNotificationHistoryRequestBody getNotificationHistoryRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Notification History
        /// </summary>
        /// <remarks>
        /// -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationHistoryRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationHistorySuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationHistorySuccessResponse>> GetNotificationHistoryWithHttpInfoAsync(string notificationId, GetNotificationHistoryRequestBody getNotificationHistoryRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View notifications
        /// </summary>
        /// <remarks>
        /// View the details of multiple notifications
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationSlice</returns>
        System.Threading.Tasks.Task<NotificationSlice> GetNotificationsAsync(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View notifications
        /// </summary>
        /// <remarks>
        /// View the details of multiple notifications
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationSlice)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotificationSlice>> GetNotificationsWithHttpInfoAsync(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// View Outcomes
        /// </summary>
        /// <remarks>
        /// View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutcomesData</returns>
        System.Threading.Tasks.Task<OutcomesData> GetOutcomesAsync(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// View Outcomes
        /// </summary>
        /// <remarks>
        /// View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutcomesData)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutcomesData>> GetOutcomesWithHttpInfoAsync(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Segments
        /// </summary>
        /// <remarks>
        /// Returns an array of segments from an app.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="offset">Segments are listed in ascending order of created_at date. offset will omit that number of segments from the beginning of the list. Eg offset 5, will remove the 5 earliest created Segments. (optional)</param>
        /// <param name="limit">The amount of Segments in the response. Maximum 300. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSegmentsSuccessResponse</returns>
        System.Threading.Tasks.Task<GetSegmentsSuccessResponse> GetSegmentsAsync(string appId, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Segments
        /// </summary>
        /// <remarks>
        /// Returns an array of segments from an app.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="offset">Segments are listed in ascending order of created_at date. offset will omit that number of segments from the beginning of the list. Eg offset 5, will remove the 5 earliest created Segments. (optional)</param>
        /// <param name="limit">The amount of Segments in the response. Maximum 300. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSegmentsSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSegmentsSuccessResponse>> GetSegmentsWithHttpInfoAsync(string appId, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the User’s properties, Aliases, and Subscriptions.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> GetUserAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the User’s properties, Aliases, and Subscriptions.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> GetUserWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers this Subscription to the User identified by the identity in the payload.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityBody</returns>
        System.Threading.Tasks.Task<UserIdentityBody> TransferSubscriptionAsync(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Transfers this Subscription to the User identified by the identity in the payload.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserIdentityBody>> TransferSubscriptionWithHttpInfoAsync(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Unsubscribe with token
        /// </summary>
        /// <remarks>
        /// Unsubscribe an email with a token when using your own custom email unsubscribe landing page
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="notificationId">The id of the message found in the creation notification POST response, View Notifications GET response, or URL within the Message Report.</param>
        /// <param name="token">The unsubscribe token that is generated via liquid syntax in {{subscription.unsubscribe_token}} when personalizing an email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenericSuccessBoolResponse</returns>
        System.Threading.Tasks.Task<GenericSuccessBoolResponse> UnsubscribeEmailWithTokenAsync(string appId, string notificationId, string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Unsubscribe with token
        /// </summary>
        /// <remarks>
        /// Unsubscribe an email with a token when using your own custom email unsubscribe landing page
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="notificationId">The id of the message found in the creation notification POST response, View Notifications GET response, or URL within the Message Report.</param>
        /// <param name="token">The unsubscribe token that is generated via liquid syntax in {{subscription.unsubscribe_token}} when personalizing an email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenericSuccessBoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenericSuccessBoolResponse>> UnsubscribeEmailWithTokenWithHttpInfoAsync(string appId, string notificationId, string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an app
        /// </summary>
        /// <remarks>
        /// Updates the name or configuration settings of an existing OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        System.Threading.Tasks.Task<App> UpdateAppAsync(string appId, App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an app
        /// </summary>
        /// <remarks>
        /// Updates the name or configuration settings of an existing OneSignal app
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        System.Threading.Tasks.Task<ApiResponse<App>> UpdateAppWithHttpInfoAsync(string appId, App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update a Live Activity via Push
        /// </summary>
        /// <remarks>
        /// Updates a specified live activity.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateLiveActivitySuccessResponse</returns>
        System.Threading.Tasks.Task<UpdateLiveActivitySuccessResponse> UpdateLiveActivityAsync(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update a Live Activity via Push
        /// </summary>
        /// <remarks>
        /// Updates a specified live activity.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateLiveActivitySuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateLiveActivitySuccessResponse>> UpdateLiveActivityWithHttpInfoAsync(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing Subscription’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateSubscriptionAsync(string appId, string subscriptionId, SubscriptionBody subscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing Subscription’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateSubscriptionWithHttpInfoAsync(string appId, string subscriptionId, SubscriptionBody subscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing User’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesBody</returns>
        System.Threading.Tasks.Task<PropertiesBody> UpdateUserAsync(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Updates an existing User’s properties.
        /// </remarks>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesBody)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropertiesBody>> UpdateUserWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private OneSignalApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = OneSignalApi.Client.Configuration.MergeConfigurations(
                OneSignalApi.Client.GlobalConfiguration.Instance,
                new OneSignalApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new OneSignalApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OneSignalApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = OneSignalApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(OneSignalApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = OneSignalApi.Client.Configuration.MergeConfigurations(
                OneSignalApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new OneSignalApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new OneSignalApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = OneSignalApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(OneSignalApi.Client.ISynchronousClient client, OneSignalApi.Client.IAsynchronousClient asyncClient, OneSignalApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = OneSignalApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public OneSignalApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public OneSignalApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public OneSignalApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public OneSignalApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Stop a scheduled or currently outgoing notification Used to stop a scheduled or currently outgoing notification
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenericSuccessBoolResponse</returns>
        public GenericSuccessBoolResponse CancelNotification(string appId, string notificationId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<GenericSuccessBoolResponse> localVarResponse = CancelNotificationWithHttpInfo(appId, notificationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop a scheduled or currently outgoing notification Used to stop a scheduled or currently outgoing notification
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenericSuccessBoolResponse</returns>
        public OneSignalApi.Client.ApiResponse<GenericSuccessBoolResponse> CancelNotificationWithHttpInfo(string appId, string notificationId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CancelNotification");
            }

            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->CancelNotification");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));

            localVarRequestOptions.Operation = "DefaultApi.CancelNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<GenericSuccessBoolResponse>("/notifications/{notification_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Stop a scheduled or currently outgoing notification Used to stop a scheduled or currently outgoing notification
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenericSuccessBoolResponse</returns>
        public async System.Threading.Tasks.Task<GenericSuccessBoolResponse> CancelNotificationAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<GenericSuccessBoolResponse> localVarResponse = await CancelNotificationWithHttpInfoAsync(appId, notificationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Stop a scheduled or currently outgoing notification Used to stop a scheduled or currently outgoing notification
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenericSuccessBoolResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<GenericSuccessBoolResponse>> CancelNotificationWithHttpInfoAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CancelNotification");
            }

            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->CancelNotification");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));

            localVarRequestOptions.Operation = "DefaultApi.CancelNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<GenericSuccessBoolResponse>("/notifications/{notification_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityBody</returns>
        public UserIdentityBody CreateAlias(string appId, string aliasLabel, string aliasId, UserIdentityBody userIdentityBody, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<UserIdentityBody> localVarResponse = CreateAliasWithHttpInfo(appId, aliasLabel, aliasId, userIdentityBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityBody</returns>
        public OneSignalApi.Client.ApiResponse<UserIdentityBody> CreateAliasWithHttpInfo(string appId, string aliasLabel, string aliasId, UserIdentityBody userIdentityBody, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateAlias");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->CreateAlias");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->CreateAlias");
            }

            // verify the required parameter 'userIdentityBody' is set
            if (userIdentityBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'userIdentityBody' when calling DefaultApi->CreateAlias");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = userIdentityBody;

            localVarRequestOptions.Operation = "DefaultApi.CreateAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UserIdentityBody>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/identity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityBody</returns>
        public async System.Threading.Tasks.Task<UserIdentityBody> CreateAliasAsync(string appId, string aliasLabel, string aliasId, UserIdentityBody userIdentityBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<UserIdentityBody> localVarResponse = await CreateAliasWithHttpInfoAsync(appId, aliasLabel, aliasId, userIdentityBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upserts one or more Aliases to an existing User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityBody)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<UserIdentityBody>> CreateAliasWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, UserIdentityBody userIdentityBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateAlias");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->CreateAlias");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->CreateAlias");
            }

            // verify the required parameter 'userIdentityBody' is set
            if (userIdentityBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'userIdentityBody' when calling DefaultApi->CreateAlias");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = userIdentityBody;

            localVarRequestOptions.Operation = "DefaultApi.CreateAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UserIdentityBody>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/identity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upserts one or more Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityBody</returns>
        public UserIdentityBody CreateAliasBySubscription(string appId, string subscriptionId, UserIdentityBody userIdentityBody, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<UserIdentityBody> localVarResponse = CreateAliasBySubscriptionWithHttpInfo(appId, subscriptionId, userIdentityBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upserts one or more Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityBody</returns>
        public OneSignalApi.Client.ApiResponse<UserIdentityBody> CreateAliasBySubscriptionWithHttpInfo(string appId, string subscriptionId, UserIdentityBody userIdentityBody, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateAliasBySubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->CreateAliasBySubscription");
            }

            // verify the required parameter 'userIdentityBody' is set
            if (userIdentityBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'userIdentityBody' when calling DefaultApi->CreateAliasBySubscription");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = userIdentityBody;

            localVarRequestOptions.Operation = "DefaultApi.CreateAliasBySubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UserIdentityBody>("/apps/{app_id}/subscriptions/{subscription_id}/user/identity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAliasBySubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upserts one or more Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityBody</returns>
        public async System.Threading.Tasks.Task<UserIdentityBody> CreateAliasBySubscriptionAsync(string appId, string subscriptionId, UserIdentityBody userIdentityBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<UserIdentityBody> localVarResponse = await CreateAliasBySubscriptionWithHttpInfoAsync(appId, subscriptionId, userIdentityBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Upserts one or more Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="userIdentityBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityBody)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<UserIdentityBody>> CreateAliasBySubscriptionWithHttpInfoAsync(string appId, string subscriptionId, UserIdentityBody userIdentityBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateAliasBySubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->CreateAliasBySubscription");
            }

            // verify the required parameter 'userIdentityBody' is set
            if (userIdentityBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'userIdentityBody' when calling DefaultApi->CreateAliasBySubscription");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = userIdentityBody;

            localVarRequestOptions.Operation = "DefaultApi.CreateAliasBySubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UserIdentityBody>("/apps/{app_id}/subscriptions/{subscription_id}/user/identity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateAliasBySubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an app Creates a new OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>App</returns>
        public App CreateApp(App app, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<App> localVarResponse = CreateAppWithHttpInfo(app);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an app Creates a new OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of App</returns>
        public OneSignalApi.Client.ApiResponse<App> CreateAppWithHttpInfo(App app, int operationIndex = 0)
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'app' when calling DefaultApi->CreateApp");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = app;

            localVarRequestOptions.Operation = "DefaultApi.CreateApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (organization_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<App>("/apps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create an app Creates a new OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        public async System.Threading.Tasks.Task<App> CreateAppAsync(App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<App> localVarResponse = await CreateAppWithHttpInfoAsync(app, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create an app Creates a new OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<App>> CreateAppWithHttpInfoAsync(App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'app' when calling DefaultApi->CreateApp");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = app;

            localVarRequestOptions.Operation = "DefaultApi.CreateApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (organization_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<App>("/apps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create notification Sends notifications to your users 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateNotificationSuccessResponse</returns>
        public CreateNotificationSuccessResponse CreateNotification(Notification notification, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<CreateNotificationSuccessResponse> localVarResponse = CreateNotificationWithHttpInfo(notification);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create notification Sends notifications to your users 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateNotificationSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<CreateNotificationSuccessResponse> CreateNotificationWithHttpInfo(Notification notification, int operationIndex = 0)
        {
            // verify the required parameter 'notification' is set
            if (notification == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notification' when calling DefaultApi->CreateNotification");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = notification;

            localVarRequestOptions.Operation = "DefaultApi.CreateNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateNotificationSuccessResponse>("/notifications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create notification Sends notifications to your users 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNotificationSuccessResponse</returns>
        public async System.Threading.Tasks.Task<CreateNotificationSuccessResponse> CreateNotificationAsync(Notification notification, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<CreateNotificationSuccessResponse> localVarResponse = await CreateNotificationWithHttpInfoAsync(notification, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create notification Sends notifications to your users 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notification"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNotificationSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<CreateNotificationSuccessResponse>> CreateNotificationWithHttpInfoAsync(Notification notification, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'notification' is set
            if (notification == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notification' when calling DefaultApi->CreateNotification");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = notification;

            localVarRequestOptions.Operation = "DefaultApi.CreateNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateNotificationSuccessResponse>("/notifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (localVarResponse.StatusCode != HttpStatusCode.OK && this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Segment Create a segment visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segment endpoint and re-create it with this endpoint to edit. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSegmentSuccessResponse</returns>
        public CreateSegmentSuccessResponse CreateSegment(string appId, Segment segment = default(Segment), int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<CreateSegmentSuccessResponse> localVarResponse = CreateSegmentWithHttpInfo(appId, segment);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Segment Create a segment visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segment endpoint and re-create it with this endpoint to edit. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSegmentSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<CreateSegmentSuccessResponse> CreateSegmentWithHttpInfo(string appId, Segment segment = default(Segment), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateSegment");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = segment;

            localVarRequestOptions.Operation = "DefaultApi.CreateSegment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSegmentSuccessResponse>("/apps/{app_id}/segments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSegment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Segment Create a segment visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segment endpoint and re-create it with this endpoint to edit. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSegmentSuccessResponse</returns>
        public async System.Threading.Tasks.Task<CreateSegmentSuccessResponse> CreateSegmentAsync(string appId, Segment segment = default(Segment), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<CreateSegmentSuccessResponse> localVarResponse = await CreateSegmentWithHttpInfoAsync(appId, segment, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Segment Create a segment visible and usable in the dashboard and API - Required: OneSignal Paid Plan The Create Segment method is used when you want your server to programmatically create a segment instead of using the OneSignal Dashboard UI. Just like creating Segments from the dashboard you can pass in filters with multiple \&quot;AND\&quot; or \&quot;OR\&quot; operator&#39;s. &amp;#x1F6A7; Does Not Update Segments This endpoint will only create segments, it does not edit or update currently created Segments. You will need to use the Delete Segment endpoint and re-create it with this endpoint to edit. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segment"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSegmentSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<CreateSegmentSuccessResponse>> CreateSegmentWithHttpInfoAsync(string appId, Segment segment = default(Segment), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateSegment");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = segment;

            localVarRequestOptions.Operation = "DefaultApi.CreateSegment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSegmentSuccessResponse>("/apps/{app_id}/segments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSegment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SubscriptionBody</returns>
        public SubscriptionBody CreateSubscription(string appId, string aliasLabel, string aliasId, SubscriptionBody subscriptionBody, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<SubscriptionBody> localVarResponse = CreateSubscriptionWithHttpInfo(appId, aliasLabel, aliasId, subscriptionBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SubscriptionBody</returns>
        public OneSignalApi.Client.ApiResponse<SubscriptionBody> CreateSubscriptionWithHttpInfo(string appId, string aliasLabel, string aliasId, SubscriptionBody subscriptionBody, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateSubscription");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->CreateSubscription");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->CreateSubscription");
            }

            // verify the required parameter 'subscriptionBody' is set
            if (subscriptionBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionBody' when calling DefaultApi->CreateSubscription");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = subscriptionBody;

            localVarRequestOptions.Operation = "DefaultApi.CreateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SubscriptionBody>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/subscriptions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SubscriptionBody</returns>
        public async System.Threading.Tasks.Task<SubscriptionBody> CreateSubscriptionAsync(string appId, string aliasLabel, string aliasId, SubscriptionBody subscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<SubscriptionBody> localVarResponse = await CreateSubscriptionWithHttpInfoAsync(appId, aliasLabel, aliasId, subscriptionBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a new Subscription under the User provided. Useful to add email addresses and SMS numbers to the User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SubscriptionBody)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<SubscriptionBody>> CreateSubscriptionWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, SubscriptionBody subscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateSubscription");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->CreateSubscription");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->CreateSubscription");
            }

            // verify the required parameter 'subscriptionBody' is set
            if (subscriptionBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionBody' when calling DefaultApi->CreateSubscription");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = subscriptionBody;

            localVarRequestOptions.Operation = "DefaultApi.CreateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SubscriptionBody>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/subscriptions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User CreateUser(string appId, User user, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<User> localVarResponse = CreateUserWithHttpInfo(appId, user);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public OneSignalApi.Client.ApiResponse<User> CreateUserWithHttpInfo(string appId, User user, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateUser");
            }

            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'user' when calling DefaultApi->CreateUser");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = user;

            localVarRequestOptions.Operation = "DefaultApi.CreateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<User>("/apps/{app_id}/users", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> CreateUserAsync(string appId, User user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<User> localVarResponse = await CreateUserWithHttpInfoAsync(appId, user, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Creates a User, optionally Subscriptions owned by the User as well as Aliases. Aliases provided in the payload will be used to look up an existing User.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="user"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<User>> CreateUserWithHttpInfoAsync(string appId, User user, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->CreateUser");
            }

            // verify the required parameter 'user' is set
            if (user == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'user' when calling DefaultApi->CreateUser");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = user;

            localVarRequestOptions.Operation = "DefaultApi.CreateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<User>("/apps/{app_id}/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes an alias by alias label
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityBody</returns>
        public UserIdentityBody DeleteAlias(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<UserIdentityBody> localVarResponse = DeleteAliasWithHttpInfo(appId, aliasLabel, aliasId, aliasLabelToDelete);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes an alias by alias label
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityBody</returns>
        public OneSignalApi.Client.ApiResponse<UserIdentityBody> DeleteAliasWithHttpInfo(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteAlias");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->DeleteAlias");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->DeleteAlias");
            }

            // verify the required parameter 'aliasLabelToDelete' is set
            if (aliasLabelToDelete == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabelToDelete' when calling DefaultApi->DeleteAlias");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label_to_delete", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabelToDelete)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<UserIdentityBody>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/identity/{alias_label_to_delete}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes an alias by alias label
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityBody</returns>
        public async System.Threading.Tasks.Task<UserIdentityBody> DeleteAliasAsync(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<UserIdentityBody> localVarResponse = await DeleteAliasWithHttpInfoAsync(appId, aliasLabel, aliasId, aliasLabelToDelete, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Deletes an alias by alias label
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="aliasLabelToDelete"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityBody)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<UserIdentityBody>> DeleteAliasWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, string aliasLabelToDelete, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteAlias");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->DeleteAlias");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->DeleteAlias");
            }

            // verify the required parameter 'aliasLabelToDelete' is set
            if (aliasLabelToDelete == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabelToDelete' when calling DefaultApi->DeleteAlias");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label_to_delete", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabelToDelete)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteAlias";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<UserIdentityBody>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/identity/{alias_label_to_delete}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteAlias", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Segment Delete a segment (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenericSuccessBoolResponse</returns>
        public GenericSuccessBoolResponse DeleteSegment(string appId, string segmentId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<GenericSuccessBoolResponse> localVarResponse = DeleteSegmentWithHttpInfo(appId, segmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Segment Delete a segment (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenericSuccessBoolResponse</returns>
        public OneSignalApi.Client.ApiResponse<GenericSuccessBoolResponse> DeleteSegmentWithHttpInfo(string appId, string segmentId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteSegment");
            }

            // verify the required parameter 'segmentId' is set
            if (segmentId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'segmentId' when calling DefaultApi->DeleteSegment");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("segment_id", OneSignalApi.Client.ClientUtils.ParameterToString(segmentId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteSegment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<GenericSuccessBoolResponse>("/apps/{app_id}/segments/{segment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSegment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Segment Delete a segment (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenericSuccessBoolResponse</returns>
        public async System.Threading.Tasks.Task<GenericSuccessBoolResponse> DeleteSegmentAsync(string appId, string segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<GenericSuccessBoolResponse> localVarResponse = await DeleteSegmentWithHttpInfoAsync(appId, segmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Segment Delete a segment (not user devices) - Required: OneSignal Paid Plan You can delete a segment under your app by calling this API. You must provide an API key in the Authorization header that has admin access on the app. The segment_id can be found in the URL of the segment when viewing it in the dashboard. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="segmentId">The segment_id can be found in the URL of the segment when viewing it in the dashboard.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenericSuccessBoolResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<GenericSuccessBoolResponse>> DeleteSegmentWithHttpInfoAsync(string appId, string segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteSegment");
            }

            // verify the required parameter 'segmentId' is set
            if (segmentId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'segmentId' when calling DefaultApi->DeleteSegment");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("segment_id", OneSignalApi.Client.ClientUtils.ParameterToString(segmentId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteSegment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<GenericSuccessBoolResponse>("/apps/{app_id}/segments/{segment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSegment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes the Subscription.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteSubscription(string appId, string subscriptionId, int operationIndex = 0)
        {
            DeleteSubscriptionWithHttpInfo(appId, subscriptionId);
        }

        /// <summary>
        ///  Deletes the Subscription.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OneSignalApi.Client.ApiResponse<Object> DeleteSubscriptionWithHttpInfo(string appId, string subscriptionId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->DeleteSubscription");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/apps/{app_id}/subscriptions/{subscription_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes the Subscription.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSubscriptionAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSubscriptionWithHttpInfoAsync(appId, subscriptionId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes the Subscription.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<Object>> DeleteSubscriptionWithHttpInfoAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->DeleteSubscription");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/apps/{app_id}/subscriptions/{subscription_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteUser(string appId, string aliasLabel, string aliasId, int operationIndex = 0)
        {
            DeleteUserWithHttpInfo(appId, aliasLabel, aliasId);
        }

        /// <summary>
        ///  Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OneSignalApi.Client.ApiResponse<Object> DeleteUserWithHttpInfo(string appId, string aliasLabel, string aliasId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteUser");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->DeleteUser");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->DeleteUser");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/apps/{app_id}/users/by/{alias_label}/{alias_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteUserWithHttpInfoAsync(appId, aliasLabel, aliasId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Removes the User identified by (:alias_label, :alias_id), and all Subscriptions and Aliases
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<Object>> DeleteUserWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->DeleteUser");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->DeleteUser");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->DeleteUser");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/apps/{app_id}/users/by/{alias_label}/{alias_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export CSV of Events Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportEventsSuccessResponse</returns>
        public ExportEventsSuccessResponse ExportEvents(string notificationId, string appId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<ExportEventsSuccessResponse> localVarResponse = ExportEventsWithHttpInfo(notificationId, appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export CSV of Events Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportEventsSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<ExportEventsSuccessResponse> ExportEventsWithHttpInfo(string notificationId, string appId, int operationIndex = 0)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->ExportEvents");
            }

            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->ExportEvents");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));

            localVarRequestOptions.Operation = "DefaultApi.ExportEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ExportEventsSuccessResponse>("/notifications/{notification_id}/export_events?app_id={app_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export CSV of Events Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportEventsSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ExportEventsSuccessResponse> ExportEventsAsync(string notificationId, string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<ExportEventsSuccessResponse> localVarResponse = await ExportEventsWithHttpInfoAsync(notificationId, appId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export CSV of Events Generate a compressed CSV report of all of the events data for a notification. This will return a URL immediately upon success but it may take several minutes for the CSV to become available at that URL depending on the volume of data. Only one export can be in-progress per OneSignal account at any given time.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The ID of the notification to export events from.</param>
        /// <param name="appId">The ID of the app that the notification belongs to.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportEventsSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<ExportEventsSuccessResponse>> ExportEventsWithHttpInfoAsync(string notificationId, string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->ExportEvents");
            }

            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->ExportEvents");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));

            localVarRequestOptions.Operation = "DefaultApi.ExportEvents";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ExportEventsSuccessResponse>("/notifications/{notification_id}/export_events?app_id={app_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export CSV of Subscriptions Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportSubscriptionsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExportSubscriptionsSuccessResponse</returns>
        public ExportSubscriptionsSuccessResponse ExportSubscriptions(string appId, ExportSubscriptionsRequestBody exportSubscriptionsRequestBody = default(ExportSubscriptionsRequestBody), int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<ExportSubscriptionsSuccessResponse> localVarResponse = ExportSubscriptionsWithHttpInfo(appId, exportSubscriptionsRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export CSV of Subscriptions Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportSubscriptionsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExportSubscriptionsSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<ExportSubscriptionsSuccessResponse> ExportSubscriptionsWithHttpInfo(string appId, ExportSubscriptionsRequestBody exportSubscriptionsRequestBody = default(ExportSubscriptionsRequestBody), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->ExportSubscriptions");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = exportSubscriptionsRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.ExportSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ExportSubscriptionsSuccessResponse>("/players/csv_export?app_id={app_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export CSV of Subscriptions Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportSubscriptionsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExportSubscriptionsSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ExportSubscriptionsSuccessResponse> ExportSubscriptionsAsync(string appId, ExportSubscriptionsRequestBody exportSubscriptionsRequestBody = default(ExportSubscriptionsRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<ExportSubscriptionsSuccessResponse> localVarResponse = await ExportSubscriptionsWithHttpInfoAsync(appId, exportSubscriptionsRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export CSV of Subscriptions Generate a compressed CSV export of all of your current user data This method can be used to generate a compressed CSV export of all of your current user data. It is a much faster alternative than retrieving this data using the /players API endpoint. The file will be compressed using GZip. The file may take several minutes to generate depending on the number of users in your app. The URL generated will be available for 3 days and includes random v4 uuid as part of the resource name to be unguessable. &amp;#x1F6A7; 403 Error Responses          You can test if it is complete by making a GET request to the csv_file_url value. This file may take time to generate depending on how many device records are being pulled. If the file is not ready, a 403 error will be returned. Otherwise the file itself will be returned. &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs. &amp;#x1F6A7; Concurrent Exports Only one concurrent export is allowed per OneSignal account. Please ensure you have successfully downloaded the .csv.gz file before exporting another app. CSV File Format: - Default Columns:   | Field | Details |   | - -- | - -- |   | id | OneSignal Player Id |   | identifier | Push Token |   | session_count | Number of times they visited the app or site   | language | Device language code |   | timezone | Number of seconds away from UTC. Example: -28800 |   | game_version | Version of your mobile app gathered from Android Studio versionCode in your App/build.gradle and iOS uses kCFBundleVersionKey in Xcode. |   | device_os | Device Operating System Version. Example: 80 &#x3D; Chrome 80, 9 &#x3D; Android 9 |   | device_type | Device Operating System Type |   | device_model | Device Hardware String Code. Example: Mobile Web Subscribers will have &#x60;Linux armv&#x60; |   | ad_id | Based on the Google Advertising Id for Android, identifierForVendor for iOS. OptedOut means user turned off Advertising tracking on the device. |   | tags | Current OneSignal Data Tags on the device. |   | last_active | Date and time the user last opened the mobile app or visited the site. |   | playtime | Total amount of time in seconds the user had the mobile app open. |   | amount_spent |  Mobile only - amount spent in USD on In-App Purchases. |    | created_at | Date and time the device record was created in OneSignal. Mobile - first time they opened the app with OneSignal SDK. Web - first time the user subscribed to the site. |   | invalid_identifier | t &#x3D; unsubscribed, f &#x3D; subscibed |   | badge_count | Current number of badges on the device | - Extra Columns:   | Field | Details |   | - -- | - -- |   | external_user_id | Your User Id set on the device |   | notification_types | Notification types |   | location | Location points (Latitude and Longitude) set on the device. |   | country | Country code |   | rooted | Android device rooted or not |   | ip | IP Address of the device if being tracked. See Handling Personal Data. |   | web_auth | Web Only authorization key. |   | web_p256 | Web Only p256 key. | 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to export devices from</param>
        /// <param name="exportSubscriptionsRequestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExportSubscriptionsSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<ExportSubscriptionsSuccessResponse>> ExportSubscriptionsWithHttpInfoAsync(string appId, ExportSubscriptionsRequestBody exportSubscriptionsRequestBody = default(ExportSubscriptionsRequestBody), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->ExportSubscriptions");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = exportSubscriptionsRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.ExportSubscriptions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ExportSubscriptionsSuccessResponse>("/players/csv_export?app_id={app_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExportSubscriptions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityBody</returns>
        public UserIdentityBody GetAliases(string appId, string aliasLabel, string aliasId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<UserIdentityBody> localVarResponse = GetAliasesWithHttpInfo(appId, aliasLabel, aliasId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityBody</returns>
        public OneSignalApi.Client.ApiResponse<UserIdentityBody> GetAliasesWithHttpInfo(string appId, string aliasLabel, string aliasId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetAliases");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->GetAliases");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->GetAliases");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetAliases";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserIdentityBody>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/identity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliases", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityBody</returns>
        public async System.Threading.Tasks.Task<UserIdentityBody> GetAliasesAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<UserIdentityBody> localVarResponse = await GetAliasesWithHttpInfoAsync(appId, aliasLabel, aliasId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by (:alias_label, :alias_id).
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityBody)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<UserIdentityBody>> GetAliasesWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetAliases");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->GetAliases");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->GetAliases");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetAliases";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserIdentityBody>("/apps/{app_id}/users/by/{alias_label}/{alias_id}/identity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliases", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityBody</returns>
        public UserIdentityBody GetAliasesBySubscription(string appId, string subscriptionId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<UserIdentityBody> localVarResponse = GetAliasesBySubscriptionWithHttpInfo(appId, subscriptionId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityBody</returns>
        public OneSignalApi.Client.ApiResponse<UserIdentityBody> GetAliasesBySubscriptionWithHttpInfo(string appId, string subscriptionId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetAliasesBySubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->GetAliasesBySubscription");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetAliasesBySubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserIdentityBody>("/apps/{app_id}/subscriptions/{subscription_id}/user/identity", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliasesBySubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityBody</returns>
        public async System.Threading.Tasks.Task<UserIdentityBody> GetAliasesBySubscriptionAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<UserIdentityBody> localVarResponse = await GetAliasesBySubscriptionWithHttpInfoAsync(appId, subscriptionId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Lists all Aliases for the User identified by :subscription_id.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityBody)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<UserIdentityBody>> GetAliasesBySubscriptionWithHttpInfoAsync(string appId, string subscriptionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetAliasesBySubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->GetAliasesBySubscription");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetAliasesBySubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<UserIdentityBody>("/apps/{app_id}/subscriptions/{subscription_id}/user/identity", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAliasesBySubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View an app View the details of a single OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>App</returns>
        public App GetApp(string appId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<App> localVarResponse = GetAppWithHttpInfo(appId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View an app View the details of a single OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of App</returns>
        public OneSignalApi.Client.ApiResponse<App> GetAppWithHttpInfo(string appId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetApp");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (organization_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<App>("/apps/{app_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View an app View the details of a single OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        public async System.Threading.Tasks.Task<App> GetAppAsync(string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<App> localVarResponse = await GetAppWithHttpInfoAsync(appId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View an app View the details of a single OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<App>> GetAppWithHttpInfoAsync(string appId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetApp");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (organization_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<App>("/apps/{app_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View apps View the details of all of your current OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;App&gt;</returns>
        public List<App> GetApps(int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<List<App>> localVarResponse = GetAppsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// View apps View the details of all of your current OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;App&gt;</returns>
        public OneSignalApi.Client.ApiResponse<List<App>> GetAppsWithHttpInfo(int operationIndex = 0)
        {
            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetApps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (organization_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<App>>("/apps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View apps View the details of all of your current OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;App&gt;</returns>
        public async System.Threading.Tasks.Task<List<App>> GetAppsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<List<App>> localVarResponse = await GetAppsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View apps View the details of all of your current OneSignal apps
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;App&gt;)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<List<App>>> GetAppsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DefaultApi.GetApps";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (organization_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<App>>("/apps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetApps", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View notification View the details of a single notification and outcomes associated with it
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationWithMeta</returns>
        public NotificationWithMeta GetNotification(string appId, string notificationId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<NotificationWithMeta> localVarResponse = GetNotificationWithHttpInfo(appId, notificationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View notification View the details of a single notification and outcomes associated with it
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationWithMeta</returns>
        public OneSignalApi.Client.ApiResponse<NotificationWithMeta> GetNotificationWithHttpInfo(string appId, string notificationId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetNotification");
            }

            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->GetNotification");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));

            localVarRequestOptions.Operation = "DefaultApi.GetNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NotificationWithMeta>("/notifications/{notification_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View notification View the details of a single notification and outcomes associated with it
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationWithMeta</returns>
        public async System.Threading.Tasks.Task<NotificationWithMeta> GetNotificationAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<NotificationWithMeta> localVarResponse = await GetNotificationWithHttpInfoAsync(appId, notificationId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View notification View the details of a single notification and outcomes associated with it
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="notificationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationWithMeta)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<NotificationWithMeta>> GetNotificationWithHttpInfoAsync(string appId, string notificationId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetNotification");
            }

            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->GetNotification");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));

            localVarRequestOptions.Operation = "DefaultApi.GetNotification";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NotificationWithMeta>("/notifications/{notification_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotification", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Notification History -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationHistoryRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationHistorySuccessResponse</returns>
        public NotificationHistorySuccessResponse GetNotificationHistory(string notificationId, GetNotificationHistoryRequestBody getNotificationHistoryRequestBody, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<NotificationHistorySuccessResponse> localVarResponse = GetNotificationHistoryWithHttpInfo(notificationId, getNotificationHistoryRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Notification History -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationHistoryRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationHistorySuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<NotificationHistorySuccessResponse> GetNotificationHistoryWithHttpInfo(string notificationId, GetNotificationHistoryRequestBody getNotificationHistoryRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->GetNotificationHistory");
            }

            // verify the required parameter 'getNotificationHistoryRequestBody' is set
            if (getNotificationHistoryRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'getNotificationHistoryRequestBody' when calling DefaultApi->GetNotificationHistory");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.Data = getNotificationHistoryRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.GetNotificationHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NotificationHistorySuccessResponse>("/notifications/{notification_id}/history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotificationHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Notification History -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationHistoryRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationHistorySuccessResponse</returns>
        public async System.Threading.Tasks.Task<NotificationHistorySuccessResponse> GetNotificationHistoryAsync(string notificationId, GetNotificationHistoryRequestBody getNotificationHistoryRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<NotificationHistorySuccessResponse> localVarResponse = await GetNotificationHistoryWithHttpInfoAsync(notificationId, getNotificationHistoryRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Notification History -&gt; View the devices sent a message - OneSignal Paid Plan Required This method will return all devices that were sent the given notification_id of an Email or Push Notification if used within 7 days of the date sent. After 7 days of the sending date, the message history data will be unavailable. After a successful response is received, the destination url may be polled until the file becomes available. Most exports are done in ~1-3 minutes, so setting a poll interval of 10 seconds should be adequate. For use cases that are not meant to be consumed by a script, an email will be sent to the supplied email address. &amp;#x1F6A7; Requirements A OneSignal Paid Plan. Turn on Send History via OneSignal API in Settings -&gt; Analytics. Cannot get data before this was turned on. Must be called within 7 days after sending the message. Messages targeting under 1000 recipients will not have \&quot;sent\&quot; events recorded, but will show \&quot;clicked\&quot; events. Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notificationId">The \&quot;id\&quot; of the message found in the Notification object</param>
        /// <param name="getNotificationHistoryRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationHistorySuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<NotificationHistorySuccessResponse>> GetNotificationHistoryWithHttpInfoAsync(string notificationId, GetNotificationHistoryRequestBody getNotificationHistoryRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->GetNotificationHistory");
            }

            // verify the required parameter 'getNotificationHistoryRequestBody' is set
            if (getNotificationHistoryRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'getNotificationHistoryRequestBody' when calling DefaultApi->GetNotificationHistory");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.Data = getNotificationHistoryRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.GetNotificationHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NotificationHistorySuccessResponse>("/notifications/{notification_id}/history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotificationHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View notifications View the details of multiple notifications
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotificationSlice</returns>
        public NotificationSlice GetNotifications(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<NotificationSlice> localVarResponse = GetNotificationsWithHttpInfo(appId, limit, offset, kind);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View notifications View the details of multiple notifications
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotificationSlice</returns>
        public OneSignalApi.Client.ApiResponse<NotificationSlice> GetNotificationsWithHttpInfo(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetNotifications");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (kind != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "kind", kind));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetNotifications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NotificationSlice>("/notifications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotifications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View notifications View the details of multiple notifications
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotificationSlice</returns>
        public async System.Threading.Tasks.Task<NotificationSlice> GetNotificationsAsync(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<NotificationSlice> localVarResponse = await GetNotificationsWithHttpInfoAsync(appId, limit, offset, kind, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View notifications View the details of multiple notifications
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The app ID that you want to view notifications from</param>
        /// <param name="limit">How many notifications to return.  Max is 50.  Default is 50. (optional)</param>
        /// <param name="offset">Page offset.  Default is 0.  Results are sorted by queued_at in descending order.  queued_at is a representation of the time that the notification was queued at. (optional)</param>
        /// <param name="kind">Kind of notifications returned:   * unset - All notification types (default)   * &#x60;0&#x60; - Dashboard only   * &#x60;1&#x60; - API only   * &#x60;3&#x60; - Automated only  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotificationSlice)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<NotificationSlice>> GetNotificationsWithHttpInfoAsync(string appId, int? limit = default(int?), int? offset = default(int?), int? kind = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetNotifications");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "app_id", appId));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (kind != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "kind", kind));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetNotifications";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NotificationSlice>("/notifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNotifications", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View Outcomes View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OutcomesData</returns>
        public OutcomesData GetOutcomes(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<OutcomesData> localVarResponse = GetOutcomesWithHttpInfo(appId, outcomeNames, outcomeNames2, outcomeTimeRange, outcomePlatforms, outcomeAttribution);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View Outcomes View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OutcomesData</returns>
        public OneSignalApi.Client.ApiResponse<OutcomesData> GetOutcomesWithHttpInfo(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetOutcomes");
            }

            // verify the required parameter 'outcomeNames' is set
            if (outcomeNames == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'outcomeNames' when calling DefaultApi->GetOutcomes");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_names", outcomeNames));
            if (outcomeNames2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_names[]", outcomeNames2));
            }
            if (outcomeTimeRange != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_time_range", outcomeTimeRange));
            }
            if (outcomePlatforms != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_platforms", outcomePlatforms));
            }
            if (outcomeAttribution != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_attribution", outcomeAttribution));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetOutcomes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OutcomesData>("/apps/{app_id}/outcomes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOutcomes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// View Outcomes View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OutcomesData</returns>
        public async System.Threading.Tasks.Task<OutcomesData> GetOutcomesAsync(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<OutcomesData> localVarResponse = await GetOutcomesWithHttpInfoAsync(appId, outcomeNames, outcomeNames2, outcomeTimeRange, outcomePlatforms, outcomeAttribution, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// View Outcomes View the details of all the outcomes associated with your app  &amp;#x1F6A7; Requires Authentication Key Requires your OneSignal App&#39;s REST API Key, available in Keys &amp; IDs.  &amp;#x1F6A7; Outcome Data Limitations Outcomes are only accessible for around 30 days before deleted from our servers. You will need to export this data every month if you want to keep it. 
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="outcomeNames">Required Comma-separated list of names and the value (sum/count) for the returned outcome data. Note: Clicks only support count aggregation. For out-of-the-box OneSignal outcomes such as click and session duration, please use the \&quot;os\&quot; prefix with two underscores. For other outcomes, please use the name specified by the user. Example:os__session_duration.count,os__click.count,CustomOutcomeName.sum </param>
        /// <param name="outcomeNames2">Optional If outcome names contain any commas, then please specify only one value at a time. Example: outcome_names[]&#x3D;os__click.count&amp;outcome_names[]&#x3D;Sales, Purchase.count where \&quot;Sales, Purchase\&quot; is the custom outcomes with a comma in the name.  (optional)</param>
        /// <param name="outcomeTimeRange">Optional Time range for the returned data. The values can be 1h (for the last 1 hour data), 1d (for the last 1 day data), or 1mo (for the last 1 month data). Default is 1h if the parameter is omitted.  (optional)</param>
        /// <param name="outcomePlatforms">Optional Platform id. Refer device&#39;s platform ids for values. Example: outcome_platform&#x3D;0 for iOS outcome_platform&#x3D;7,8 for Safari and Firefox Default is data from all platforms if the parameter is omitted.  (optional)</param>
        /// <param name="outcomeAttribution">Optional Attribution type for the outcomes. The values can be direct or influenced or unattributed. Example: outcome_attribution&#x3D;direct Default is total (returns direct+influenced+unattributed) if the parameter is omitted.  (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OutcomesData)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<OutcomesData>> GetOutcomesWithHttpInfoAsync(string appId, string outcomeNames, string outcomeNames2 = default(string), string outcomeTimeRange = default(string), string outcomePlatforms = default(string), string outcomeAttribution = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetOutcomes");
            }

            // verify the required parameter 'outcomeNames' is set
            if (outcomeNames == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'outcomeNames' when calling DefaultApi->GetOutcomes");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_names", outcomeNames));
            if (outcomeNames2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_names[]", outcomeNames2));
            }
            if (outcomeTimeRange != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_time_range", outcomeTimeRange));
            }
            if (outcomePlatforms != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_platforms", outcomePlatforms));
            }
            if (outcomeAttribution != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "outcome_attribution", outcomeAttribution));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetOutcomes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OutcomesData>("/apps/{app_id}/outcomes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOutcomes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Segments Returns an array of segments from an app.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="offset">Segments are listed in ascending order of created_at date. offset will omit that number of segments from the beginning of the list. Eg offset 5, will remove the 5 earliest created Segments. (optional)</param>
        /// <param name="limit">The amount of Segments in the response. Maximum 300. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetSegmentsSuccessResponse</returns>
        public GetSegmentsSuccessResponse GetSegments(string appId, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<GetSegmentsSuccessResponse> localVarResponse = GetSegmentsWithHttpInfo(appId, offset, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Segments Returns an array of segments from an app.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="offset">Segments are listed in ascending order of created_at date. offset will omit that number of segments from the beginning of the list. Eg offset 5, will remove the 5 earliest created Segments. (optional)</param>
        /// <param name="limit">The amount of Segments in the response. Maximum 300. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetSegmentsSuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<GetSegmentsSuccessResponse> GetSegmentsWithHttpInfo(string appId, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetSegments");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetSegments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetSegmentsSuccessResponse>("/apps/{app_id}/segments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSegments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Segments Returns an array of segments from an app.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="offset">Segments are listed in ascending order of created_at date. offset will omit that number of segments from the beginning of the list. Eg offset 5, will remove the 5 earliest created Segments. (optional)</param>
        /// <param name="limit">The amount of Segments in the response. Maximum 300. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetSegmentsSuccessResponse</returns>
        public async System.Threading.Tasks.Task<GetSegmentsSuccessResponse> GetSegmentsAsync(string appId, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<GetSegmentsSuccessResponse> localVarResponse = await GetSegmentsWithHttpInfoAsync(appId, offset, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Segments Returns an array of segments from an app.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="offset">Segments are listed in ascending order of created_at date. offset will omit that number of segments from the beginning of the list. Eg offset 5, will remove the 5 earliest created Segments. (optional)</param>
        /// <param name="limit">The amount of Segments in the response. Maximum 300. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetSegmentsSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<GetSegmentsSuccessResponse>> GetSegmentsWithHttpInfoAsync(string appId, int? offset = default(int?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetSegments");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "DefaultApi.GetSegments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetSegmentsSuccessResponse>("/apps/{app_id}/segments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSegments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the User’s properties, Aliases, and Subscriptions.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>User</returns>
        public User GetUser(string appId, string aliasLabel, string aliasId, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<User> localVarResponse = GetUserWithHttpInfo(appId, aliasLabel, aliasId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the User’s properties, Aliases, and Subscriptions.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of User</returns>
        public OneSignalApi.Client.ApiResponse<User> GetUserWithHttpInfo(string appId, string aliasLabel, string aliasId, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetUser");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->GetUser");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->GetUser");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<User>("/apps/{app_id}/users/by/{alias_label}/{alias_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the User’s properties, Aliases, and Subscriptions.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> GetUserAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<User> localVarResponse = await GetUserWithHttpInfoAsync(appId, aliasLabel, aliasId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the User’s properties, Aliases, and Subscriptions.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<User>> GetUserWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->GetUser");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->GetUser");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->GetUser");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.GetUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<User>("/apps/{app_id}/users/by/{alias_label}/{alias_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Transfers this Subscription to the User identified by the identity in the payload.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UserIdentityBody</returns>
        public UserIdentityBody TransferSubscription(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<UserIdentityBody> localVarResponse = TransferSubscriptionWithHttpInfo(appId, subscriptionId, transferSubscriptionRequestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Transfers this Subscription to the User identified by the identity in the payload.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UserIdentityBody</returns>
        public OneSignalApi.Client.ApiResponse<UserIdentityBody> TransferSubscriptionWithHttpInfo(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->TransferSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->TransferSubscription");
            }

            // verify the required parameter 'transferSubscriptionRequestBody' is set
            if (transferSubscriptionRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'transferSubscriptionRequestBody' when calling DefaultApi->TransferSubscription");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = transferSubscriptionRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.TransferSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UserIdentityBody>("/apps/{app_id}/subscriptions/{subscription_id}/owner", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Transfers this Subscription to the User identified by the identity in the payload.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserIdentityBody</returns>
        public async System.Threading.Tasks.Task<UserIdentityBody> TransferSubscriptionAsync(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<UserIdentityBody> localVarResponse = await TransferSubscriptionWithHttpInfoAsync(appId, subscriptionId, transferSubscriptionRequestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Transfers this Subscription to the User identified by the identity in the payload.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="transferSubscriptionRequestBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserIdentityBody)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<UserIdentityBody>> TransferSubscriptionWithHttpInfoAsync(string appId, string subscriptionId, TransferSubscriptionRequestBody transferSubscriptionRequestBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->TransferSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->TransferSubscription");
            }

            // verify the required parameter 'transferSubscriptionRequestBody' is set
            if (transferSubscriptionRequestBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'transferSubscriptionRequestBody' when calling DefaultApi->TransferSubscription");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = transferSubscriptionRequestBody;

            localVarRequestOptions.Operation = "DefaultApi.TransferSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<UserIdentityBody>("/apps/{app_id}/subscriptions/{subscription_id}/owner", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unsubscribe with token Unsubscribe an email with a token when using your own custom email unsubscribe landing page
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="notificationId">The id of the message found in the creation notification POST response, View Notifications GET response, or URL within the Message Report.</param>
        /// <param name="token">The unsubscribe token that is generated via liquid syntax in {{subscription.unsubscribe_token}} when personalizing an email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenericSuccessBoolResponse</returns>
        public GenericSuccessBoolResponse UnsubscribeEmailWithToken(string appId, string notificationId, string token, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<GenericSuccessBoolResponse> localVarResponse = UnsubscribeEmailWithTokenWithHttpInfo(appId, notificationId, token);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribe with token Unsubscribe an email with a token when using your own custom email unsubscribe landing page
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="notificationId">The id of the message found in the creation notification POST response, View Notifications GET response, or URL within the Message Report.</param>
        /// <param name="token">The unsubscribe token that is generated via liquid syntax in {{subscription.unsubscribe_token}} when personalizing an email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenericSuccessBoolResponse</returns>
        public OneSignalApi.Client.ApiResponse<GenericSuccessBoolResponse> UnsubscribeEmailWithTokenWithHttpInfo(string appId, string notificationId, string token, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UnsubscribeEmailWithToken");
            }

            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->UnsubscribeEmailWithToken");
            }

            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'token' when calling DefaultApi->UnsubscribeEmailWithToken");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "token", token));

            localVarRequestOptions.Operation = "DefaultApi.UnsubscribeEmailWithToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GenericSuccessBoolResponse>("/apps/{app_id}/notifications/{notification_id}/unsubscribe", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnsubscribeEmailWithToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Unsubscribe with token Unsubscribe an email with a token when using your own custom email unsubscribe landing page
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="notificationId">The id of the message found in the creation notification POST response, View Notifications GET response, or URL within the Message Report.</param>
        /// <param name="token">The unsubscribe token that is generated via liquid syntax in {{subscription.unsubscribe_token}} when personalizing an email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenericSuccessBoolResponse</returns>
        public async System.Threading.Tasks.Task<GenericSuccessBoolResponse> UnsubscribeEmailWithTokenAsync(string appId, string notificationId, string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<GenericSuccessBoolResponse> localVarResponse = await UnsubscribeEmailWithTokenWithHttpInfoAsync(appId, notificationId, token, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribe with token Unsubscribe an email with a token when using your own custom email unsubscribe landing page
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="notificationId">The id of the message found in the creation notification POST response, View Notifications GET response, or URL within the Message Report.</param>
        /// <param name="token">The unsubscribe token that is generated via liquid syntax in {{subscription.unsubscribe_token}} when personalizing an email.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenericSuccessBoolResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<GenericSuccessBoolResponse>> UnsubscribeEmailWithTokenWithHttpInfoAsync(string appId, string notificationId, string token, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UnsubscribeEmailWithToken");
            }

            // verify the required parameter 'notificationId' is set
            if (notificationId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'notificationId' when calling DefaultApi->UnsubscribeEmailWithToken");
            }

            // verify the required parameter 'token' is set
            if (token == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'token' when calling DefaultApi->UnsubscribeEmailWithToken");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("notification_id", OneSignalApi.Client.ClientUtils.ParameterToString(notificationId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(OneSignalApi.Client.ClientUtils.ParameterToMultiMap("", "token", token));

            localVarRequestOptions.Operation = "DefaultApi.UnsubscribeEmailWithToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GenericSuccessBoolResponse>("/apps/{app_id}/notifications/{notification_id}/unsubscribe", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnsubscribeEmailWithToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an app Updates the name or configuration settings of an existing OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>App</returns>
        public App UpdateApp(string appId, App app, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<App> localVarResponse = UpdateAppWithHttpInfo(appId, app);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an app Updates the name or configuration settings of an existing OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of App</returns>
        public OneSignalApi.Client.ApiResponse<App> UpdateAppWithHttpInfo(string appId, App app, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateApp");
            }

            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'app' when calling DefaultApi->UpdateApp");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = app;

            localVarRequestOptions.Operation = "DefaultApi.UpdateApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (organization_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<App>("/apps/{app_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an app Updates the name or configuration settings of an existing OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of App</returns>
        public async System.Threading.Tasks.Task<App> UpdateAppAsync(string appId, App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<App> localVarResponse = await UpdateAppWithHttpInfoAsync(appId, app, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an app Updates the name or configuration settings of an existing OneSignal app
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">An app id</param>
        /// <param name="app"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (App)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<App>> UpdateAppWithHttpInfoAsync(string appId, App app, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateApp");
            }

            // verify the required parameter 'app' is set
            if (app == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'app' when calling DefaultApi->UpdateApp");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.Data = app;

            localVarRequestOptions.Operation = "DefaultApi.UpdateApp";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (organization_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<App>("/apps/{app_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateApp", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Live Activity via Push Updates a specified live activity.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateLiveActivitySuccessResponse</returns>
        public UpdateLiveActivitySuccessResponse UpdateLiveActivity(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<UpdateLiveActivitySuccessResponse> localVarResponse = UpdateLiveActivityWithHttpInfo(appId, activityId, updateLiveActivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Live Activity via Push Updates a specified live activity.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateLiveActivitySuccessResponse</returns>
        public OneSignalApi.Client.ApiResponse<UpdateLiveActivitySuccessResponse> UpdateLiveActivityWithHttpInfo(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateLiveActivity");
            }

            // verify the required parameter 'activityId' is set
            if (activityId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'activityId' when calling DefaultApi->UpdateLiveActivity");
            }

            // verify the required parameter 'updateLiveActivityRequest' is set
            if (updateLiveActivityRequest == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'updateLiveActivityRequest' when calling DefaultApi->UpdateLiveActivity");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("activity_id", OneSignalApi.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.Data = updateLiveActivityRequest;

            localVarRequestOptions.Operation = "DefaultApi.UpdateLiveActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UpdateLiveActivitySuccessResponse>("/apps/{app_id}/live_activities/{activity_id}/notifications", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLiveActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update a Live Activity via Push Updates a specified live activity.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateLiveActivitySuccessResponse</returns>
        public async System.Threading.Tasks.Task<UpdateLiveActivitySuccessResponse> UpdateLiveActivityAsync(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<UpdateLiveActivitySuccessResponse> localVarResponse = await UpdateLiveActivityWithHttpInfoAsync(appId, activityId, updateLiveActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update a Live Activity via Push Updates a specified live activity.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">The OneSignal App ID for your app.  Available in Keys &amp; IDs.</param>
        /// <param name="activityId">Live Activity record ID</param>
        /// <param name="updateLiveActivityRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateLiveActivitySuccessResponse)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<UpdateLiveActivitySuccessResponse>> UpdateLiveActivityWithHttpInfoAsync(string appId, string activityId, UpdateLiveActivityRequest updateLiveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateLiveActivity");
            }

            // verify the required parameter 'activityId' is set
            if (activityId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'activityId' when calling DefaultApi->UpdateLiveActivity");
            }

            // verify the required parameter 'updateLiveActivityRequest' is set
            if (updateLiveActivityRequest == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'updateLiveActivityRequest' when calling DefaultApi->UpdateLiveActivity");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("activity_id", OneSignalApi.Client.ClientUtils.ParameterToString(activityId)); // path parameter
            localVarRequestOptions.Data = updateLiveActivityRequest;

            localVarRequestOptions.Operation = "DefaultApi.UpdateLiveActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<UpdateLiveActivitySuccessResponse>("/apps/{app_id}/live_activities/{activity_id}/notifications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLiveActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates an existing Subscription’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UpdateSubscription(string appId, string subscriptionId, SubscriptionBody subscriptionBody, int operationIndex = 0)
        {
            UpdateSubscriptionWithHttpInfo(appId, subscriptionId, subscriptionBody);
        }

        /// <summary>
        ///  Updates an existing Subscription’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public OneSignalApi.Client.ApiResponse<Object> UpdateSubscriptionWithHttpInfo(string appId, string subscriptionId, SubscriptionBody subscriptionBody, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->UpdateSubscription");
            }

            // verify the required parameter 'subscriptionBody' is set
            if (subscriptionBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionBody' when calling DefaultApi->UpdateSubscription");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = subscriptionBody;

            localVarRequestOptions.Operation = "DefaultApi.UpdateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/apps/{app_id}/subscriptions/{subscription_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates an existing Subscription’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateSubscriptionAsync(string appId, string subscriptionId, SubscriptionBody subscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateSubscriptionWithHttpInfoAsync(appId, subscriptionId, subscriptionBody, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Updates an existing Subscription’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="subscriptionId"></param>
        /// <param name="subscriptionBody"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<Object>> UpdateSubscriptionWithHttpInfoAsync(string appId, string subscriptionId, SubscriptionBody subscriptionBody, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateSubscription");
            }

            // verify the required parameter 'subscriptionId' is set
            if (subscriptionId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionId' when calling DefaultApi->UpdateSubscription");
            }

            // verify the required parameter 'subscriptionBody' is set
            if (subscriptionBody == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'subscriptionBody' when calling DefaultApi->UpdateSubscription");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("subscription_id", OneSignalApi.Client.ClientUtils.ParameterToString(subscriptionId)); // path parameter
            localVarRequestOptions.Data = subscriptionBody;

            localVarRequestOptions.Operation = "DefaultApi.UpdateSubscription";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/apps/{app_id}/subscriptions/{subscription_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSubscription", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates an existing User’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropertiesBody</returns>
        public PropertiesBody UpdateUser(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0)
        {
            OneSignalApi.Client.ApiResponse<PropertiesBody> localVarResponse = UpdateUserWithHttpInfo(appId, aliasLabel, aliasId, updateUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing User’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropertiesBody</returns>
        public OneSignalApi.Client.ApiResponse<PropertiesBody> UpdateUserWithHttpInfo(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateUser");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->UpdateUser");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->UpdateUser");
            }

            // verify the required parameter 'updateUserRequest' is set
            if (updateUserRequest == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'updateUserRequest' when calling DefaultApi->UpdateUser");
            }

            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = updateUserRequest;

            localVarRequestOptions.Operation = "DefaultApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<PropertiesBody>("/apps/{app_id}/users/by/{alias_label}/{alias_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Updates an existing User’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropertiesBody</returns>
        public async System.Threading.Tasks.Task<PropertiesBody> UpdateUserAsync(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            OneSignalApi.Client.ApiResponse<PropertiesBody> localVarResponse = await UpdateUserWithHttpInfoAsync(appId, aliasLabel, aliasId, updateUserRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Updates an existing User’s properties.
        /// </summary>
        /// <exception cref="OneSignalApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId"></param>
        /// <param name="aliasLabel"></param>
        /// <param name="aliasId"></param>
        /// <param name="updateUserRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropertiesBody)</returns>
        public async System.Threading.Tasks.Task<OneSignalApi.Client.ApiResponse<PropertiesBody>> UpdateUserWithHttpInfoAsync(string appId, string aliasLabel, string aliasId, UpdateUserRequest updateUserRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'appId' when calling DefaultApi->UpdateUser");
            }

            // verify the required parameter 'aliasLabel' is set
            if (aliasLabel == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasLabel' when calling DefaultApi->UpdateUser");
            }

            // verify the required parameter 'aliasId' is set
            if (aliasId == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'aliasId' when calling DefaultApi->UpdateUser");
            }

            // verify the required parameter 'updateUserRequest' is set
            if (updateUserRequest == null)
            {
                throw new OneSignalApi.Client.ApiException(400, "Missing required parameter 'updateUserRequest' when calling DefaultApi->UpdateUser");
            }


            OneSignalApi.Client.RequestOptions localVarRequestOptions = new OneSignalApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = OneSignalApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = OneSignalApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("app_id", OneSignalApi.Client.ClientUtils.ParameterToString(appId)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_label", OneSignalApi.Client.ClientUtils.ParameterToString(aliasLabel)); // path parameter
            localVarRequestOptions.PathParameters.Add("alias_id", OneSignalApi.Client.ClientUtils.ParameterToString(aliasId)); // path parameter
            localVarRequestOptions.Data = updateUserRequest;

            localVarRequestOptions.Operation = "DefaultApi.UpdateUser";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (rest_api_key) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Key " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<PropertiesBody>("/apps/{app_id}/users/by/{alias_label}/{alias_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateUser", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
