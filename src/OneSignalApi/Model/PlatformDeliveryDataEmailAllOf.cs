/*
 * OneSignal
 *
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.0.1
 * Contact: devrel@onesignal.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OneSignalApi.Client.OpenAPIDateConverter;

namespace OneSignalApi.Model
{
    /// <summary>
    /// PlatformDeliveryDataEmailAllOf
    /// </summary>
    [DataContract(Name = "PlatformDeliveryData_email_allOf")]
    public partial class PlatformDeliveryDataEmailAllOf : IEquatable<PlatformDeliveryDataEmailAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlatformDeliveryDataEmailAllOf" /> class.
        /// </summary>
        /// <param name="opened">Number of times an email has been opened..</param>
        /// <param name="uniqueOpens">Number of unique recipients who have opened your email..</param>
        /// <param name="clicks">Number of clicked links from your email. This can include the recipient clicking email links multiple times..</param>
        /// <param name="uniqueClicks">Number of unique clicks that your recipients have made on links from your email..</param>
        /// <param name="bounced">Number of recipients who registered as a hard or soft bounce and didn&#39;t receive your email..</param>
        /// <param name="reportedSpam">Number of recipients who reported this email as spam..</param>
        /// <param name="unsubscribed">Number of recipients who opted out of your emails using the unsubscribe link in this email..</param>
        public PlatformDeliveryDataEmailAllOf(int? opened = default(int?), int? uniqueOpens = default(int?), int? clicks = default(int?), int? uniqueClicks = default(int?), int? bounced = default(int?), int? reportedSpam = default(int?), int? unsubscribed = default(int?))
        {
            this.Opened = opened;
            this.UniqueOpens = uniqueOpens;
            this.Clicks = clicks;
            this.UniqueClicks = uniqueClicks;
            this.Bounced = bounced;
            this.ReportedSpam = reportedSpam;
            this.Unsubscribed = unsubscribed;
        }

        /// <summary>
        /// Number of times an email has been opened.
        /// </summary>
        /// <value>Number of times an email has been opened.</value>
        [DataMember(Name = "opened", EmitDefaultValue = true)]
        public int? Opened { get; set; }

        /// <summary>
        /// Number of unique recipients who have opened your email.
        /// </summary>
        /// <value>Number of unique recipients who have opened your email.</value>
        [DataMember(Name = "unique_opens", EmitDefaultValue = true)]
        public int? UniqueOpens { get; set; }

        /// <summary>
        /// Number of clicked links from your email. This can include the recipient clicking email links multiple times.
        /// </summary>
        /// <value>Number of clicked links from your email. This can include the recipient clicking email links multiple times.</value>
        [DataMember(Name = "clicks", EmitDefaultValue = true)]
        public int? Clicks { get; set; }

        /// <summary>
        /// Number of unique clicks that your recipients have made on links from your email.
        /// </summary>
        /// <value>Number of unique clicks that your recipients have made on links from your email.</value>
        [DataMember(Name = "unique_clicks", EmitDefaultValue = true)]
        public int? UniqueClicks { get; set; }

        /// <summary>
        /// Number of recipients who registered as a hard or soft bounce and didn&#39;t receive your email.
        /// </summary>
        /// <value>Number of recipients who registered as a hard or soft bounce and didn&#39;t receive your email.</value>
        [DataMember(Name = "bounced", EmitDefaultValue = true)]
        public int? Bounced { get; set; }

        /// <summary>
        /// Number of recipients who reported this email as spam.
        /// </summary>
        /// <value>Number of recipients who reported this email as spam.</value>
        [DataMember(Name = "reported_spam", EmitDefaultValue = true)]
        public int? ReportedSpam { get; set; }

        /// <summary>
        /// Number of recipients who opted out of your emails using the unsubscribe link in this email.
        /// </summary>
        /// <value>Number of recipients who opted out of your emails using the unsubscribe link in this email.</value>
        [DataMember(Name = "unsubscribed", EmitDefaultValue = true)]
        public int? Unsubscribed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlatformDeliveryDataEmailAllOf {\n");
            sb.Append("  Opened: ").Append(Opened).Append("\n");
            sb.Append("  UniqueOpens: ").Append(UniqueOpens).Append("\n");
            sb.Append("  Clicks: ").Append(Clicks).Append("\n");
            sb.Append("  UniqueClicks: ").Append(UniqueClicks).Append("\n");
            sb.Append("  Bounced: ").Append(Bounced).Append("\n");
            sb.Append("  ReportedSpam: ").Append(ReportedSpam).Append("\n");
            sb.Append("  Unsubscribed: ").Append(Unsubscribed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlatformDeliveryDataEmailAllOf);
        }

        /// <summary>
        /// Returns true if PlatformDeliveryDataEmailAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of PlatformDeliveryDataEmailAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlatformDeliveryDataEmailAllOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Opened == input.Opened ||
                    (this.Opened != null &&
                    this.Opened.Equals(input.Opened))
                ) && 
                (
                    this.UniqueOpens == input.UniqueOpens ||
                    (this.UniqueOpens != null &&
                    this.UniqueOpens.Equals(input.UniqueOpens))
                ) && 
                (
                    this.Clicks == input.Clicks ||
                    (this.Clicks != null &&
                    this.Clicks.Equals(input.Clicks))
                ) && 
                (
                    this.UniqueClicks == input.UniqueClicks ||
                    (this.UniqueClicks != null &&
                    this.UniqueClicks.Equals(input.UniqueClicks))
                ) && 
                (
                    this.Bounced == input.Bounced ||
                    (this.Bounced != null &&
                    this.Bounced.Equals(input.Bounced))
                ) && 
                (
                    this.ReportedSpam == input.ReportedSpam ||
                    (this.ReportedSpam != null &&
                    this.ReportedSpam.Equals(input.ReportedSpam))
                ) && 
                (
                    this.Unsubscribed == input.Unsubscribed ||
                    (this.Unsubscribed != null &&
                    this.Unsubscribed.Equals(input.Unsubscribed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Opened != null)
                {
                    hashCode = (hashCode * 59) + this.Opened.GetHashCode();
                }
                if (this.UniqueOpens != null)
                {
                    hashCode = (hashCode * 59) + this.UniqueOpens.GetHashCode();
                }
                if (this.Clicks != null)
                {
                    hashCode = (hashCode * 59) + this.Clicks.GetHashCode();
                }
                if (this.UniqueClicks != null)
                {
                    hashCode = (hashCode * 59) + this.UniqueClicks.GetHashCode();
                }
                if (this.Bounced != null)
                {
                    hashCode = (hashCode * 59) + this.Bounced.GetHashCode();
                }
                if (this.ReportedSpam != null)
                {
                    hashCode = (hashCode * 59) + this.ReportedSpam.GetHashCode();
                }
                if (this.Unsubscribed != null)
                {
                    hashCode = (hashCode * 59) + this.Unsubscribed.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
