/*
 * OneSignal
 *
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.0.1
 * Contact: devrel@onesignal.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OneSignalApi.Client.OpenAPIDateConverter;

namespace OneSignalApi.Model
{
    /// <summary>
    /// PropertiesDeltas
    /// </summary>
    [DataContract(Name = "PropertiesDeltas")]
    public partial class PropertiesDeltas : IEquatable<PropertiesDeltas>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesDeltas" /> class.
        /// </summary>
        /// <param name="sessionTime">sessionTime.</param>
        /// <param name="sessionCount">sessionCount.</param>
        /// <param name="purchases">purchases.</param>
        public PropertiesDeltas(int sessionTime = default(int), int sessionCount = default(int), List<Purchase> purchases = default(List<Purchase>))
        {
            this.SessionTime = sessionTime;
            this.SessionCount = sessionCount;
            this.Purchases = purchases;
        }

        /// <summary>
        /// Gets or Sets SessionTime
        /// </summary>
        [DataMember(Name = "session_time", EmitDefaultValue = false)]
        public int SessionTime { get; set; }

        /// <summary>
        /// Gets or Sets SessionCount
        /// </summary>
        [DataMember(Name = "session_count", EmitDefaultValue = false)]
        public int SessionCount { get; set; }

        /// <summary>
        /// Gets or Sets Purchases
        /// </summary>
        [DataMember(Name = "purchases", EmitDefaultValue = false)]
        public List<Purchase> Purchases { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PropertiesDeltas {\n");
            sb.Append("  SessionTime: ").Append(SessionTime).Append("\n");
            sb.Append("  SessionCount: ").Append(SessionCount).Append("\n");
            sb.Append("  Purchases: ").Append(Purchases).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertiesDeltas);
        }

        /// <summary>
        /// Returns true if PropertiesDeltas instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertiesDeltas to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertiesDeltas input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SessionTime == input.SessionTime ||
                    this.SessionTime.Equals(input.SessionTime)
                ) && 
                (
                    this.SessionCount == input.SessionCount ||
                    this.SessionCount.Equals(input.SessionCount)
                ) && 
                (
                    this.Purchases == input.Purchases ||
                    this.Purchases != null &&
                    input.Purchases != null &&
                    this.Purchases.SequenceEqual(input.Purchases)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SessionTime.GetHashCode();
                hashCode = (hashCode * 59) + this.SessionCount.GetHashCode();
                if (this.Purchases != null)
                {
                    hashCode = (hashCode * 59) + this.Purchases.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
