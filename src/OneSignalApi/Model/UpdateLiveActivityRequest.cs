/*
 * OneSignal
 *
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.0.1
 * Contact: devrel@onesignal.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OneSignalApi.Client.OpenAPIDateConverter;

namespace OneSignalApi.Model
{
    /// <summary>
    /// UpdateLiveActivityRequest
    /// </summary>
    [DataContract(Name = "UpdateLiveActivityRequest")]
    public partial class UpdateLiveActivityRequest : IEquatable<UpdateLiveActivityRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines Event
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum EventEnum
        {
            /// <summary>
            /// Enum Update for value: update
            /// </summary>
            [EnumMember(Value = "update")]
            Update = 1,

            /// <summary>
            /// Enum End for value: end
            /// </summary>
            [EnumMember(Value = "end")]
            End = 2

        }


        /// <summary>
        /// Gets or Sets Event
        /// </summary>
        [DataMember(Name = "event", IsRequired = true, EmitDefaultValue = false)]
        public EventEnum Event { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateLiveActivityRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateLiveActivityRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateLiveActivityRequest" /> class.
        /// </summary>
        /// <param name="name">An internal name to assist with your campaign organization. This does not get displayed in the message itself. (required).</param>
        /// <param name="_event">_event (required).</param>
        /// <param name="eventUpdates">This must match the ContentState interface you have defined within your Live Activity in your app. (required).</param>
        /// <param name="contents">contents.</param>
        /// <param name="headings">headings.</param>
        /// <param name="sound">Sound file that is included in your app to play instead of the default device notification sound. Omit to disable vibration and sound for the notification..</param>
        /// <param name="staleDate">Accepts Unix timestamp in seconds. When time reaches the configured stale date, the system considers the Live Activity out of date, and the ActivityState of the Live Activity changes to ActivityState.stale..</param>
        /// <param name="dismissalDate">Accepts Unix timestamp in seconds; only allowed if event is \&quot;end\&quot;.</param>
        /// <param name="priority">Delivery priority through the the push provider (APNs). Pass 10 for higher priority notifications, or 5 for lower priority notifications. Lower priority notifications are sent based on the power considerations of the end user&#39;s device. If not set, defaults to 10. Some providers (APNs) allow for a limited budget of high priority notifications per hour, and if that budget is exceeded, the provider may throttle notification delivery..</param>
        public UpdateLiveActivityRequest(string name = default(string), EventEnum _event = default(EventEnum), Object eventUpdates = default(Object), LanguageStringMap contents = default(LanguageStringMap), LanguageStringMap headings = default(LanguageStringMap), string sound = default(string), int staleDate = default(int), int dismissalDate = default(int), int priority = default(int))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UpdateLiveActivityRequest and cannot be null");
            }
            this.Name = name;
            this.Event = _event;
            // to ensure "eventUpdates" is required (not null)
            if (eventUpdates == null)
            {
                throw new ArgumentNullException("eventUpdates is a required property for UpdateLiveActivityRequest and cannot be null");
            }
            this.EventUpdates = eventUpdates;
            this.Contents = contents;
            this.Headings = headings;
            this.Sound = sound;
            this.StaleDate = staleDate;
            this.DismissalDate = dismissalDate;
            this.Priority = priority;
        }

        /// <summary>
        /// An internal name to assist with your campaign organization. This does not get displayed in the message itself.
        /// </summary>
        /// <value>An internal name to assist with your campaign organization. This does not get displayed in the message itself.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// This must match the ContentState interface you have defined within your Live Activity in your app.
        /// </summary>
        /// <value>This must match the ContentState interface you have defined within your Live Activity in your app.</value>
        [DataMember(Name = "event_updates", IsRequired = true, EmitDefaultValue = false)]
        public Object EventUpdates { get; set; }

        /// <summary>
        /// Gets or Sets Contents
        /// </summary>
        [DataMember(Name = "contents", EmitDefaultValue = false)]
        public LanguageStringMap Contents { get; set; }

        /// <summary>
        /// Gets or Sets Headings
        /// </summary>
        [DataMember(Name = "headings", EmitDefaultValue = false)]
        public LanguageStringMap Headings { get; set; }

        /// <summary>
        /// Sound file that is included in your app to play instead of the default device notification sound. Omit to disable vibration and sound for the notification.
        /// </summary>
        /// <value>Sound file that is included in your app to play instead of the default device notification sound. Omit to disable vibration and sound for the notification.</value>
        [DataMember(Name = "sound", EmitDefaultValue = false)]
        public string Sound { get; set; }

        /// <summary>
        /// Accepts Unix timestamp in seconds. When time reaches the configured stale date, the system considers the Live Activity out of date, and the ActivityState of the Live Activity changes to ActivityState.stale.
        /// </summary>
        /// <value>Accepts Unix timestamp in seconds. When time reaches the configured stale date, the system considers the Live Activity out of date, and the ActivityState of the Live Activity changes to ActivityState.stale.</value>
        [DataMember(Name = "stale_date", EmitDefaultValue = false)]
        public int StaleDate { get; set; }

        /// <summary>
        /// Accepts Unix timestamp in seconds; only allowed if event is \&quot;end\&quot;
        /// </summary>
        /// <value>Accepts Unix timestamp in seconds; only allowed if event is \&quot;end\&quot;</value>
        [DataMember(Name = "dismissal_date", EmitDefaultValue = false)]
        public int DismissalDate { get; set; }

        /// <summary>
        /// Delivery priority through the the push provider (APNs). Pass 10 for higher priority notifications, or 5 for lower priority notifications. Lower priority notifications are sent based on the power considerations of the end user&#39;s device. If not set, defaults to 10. Some providers (APNs) allow for a limited budget of high priority notifications per hour, and if that budget is exceeded, the provider may throttle notification delivery.
        /// </summary>
        /// <value>Delivery priority through the the push provider (APNs). Pass 10 for higher priority notifications, or 5 for lower priority notifications. Lower priority notifications are sent based on the power considerations of the end user&#39;s device. If not set, defaults to 10. Some providers (APNs) allow for a limited budget of high priority notifications per hour, and if that budget is exceeded, the provider may throttle notification delivery.</value>
        [DataMember(Name = "priority", EmitDefaultValue = false)]
        public int Priority { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateLiveActivityRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  EventUpdates: ").Append(EventUpdates).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  Headings: ").Append(Headings).Append("\n");
            sb.Append("  Sound: ").Append(Sound).Append("\n");
            sb.Append("  StaleDate: ").Append(StaleDate).Append("\n");
            sb.Append("  DismissalDate: ").Append(DismissalDate).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateLiveActivityRequest);
        }

        /// <summary>
        /// Returns true if UpdateLiveActivityRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateLiveActivityRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateLiveActivityRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Event == input.Event ||
                    this.Event.Equals(input.Event)
                ) && 
                (
                    this.EventUpdates == input.EventUpdates ||
                    (this.EventUpdates != null &&
                    this.EventUpdates.Equals(input.EventUpdates))
                ) && 
                (
                    this.Contents == input.Contents ||
                    (this.Contents != null &&
                    this.Contents.Equals(input.Contents))
                ) && 
                (
                    this.Headings == input.Headings ||
                    (this.Headings != null &&
                    this.Headings.Equals(input.Headings))
                ) && 
                (
                    this.Sound == input.Sound ||
                    (this.Sound != null &&
                    this.Sound.Equals(input.Sound))
                ) && 
                (
                    this.StaleDate == input.StaleDate ||
                    this.StaleDate.Equals(input.StaleDate)
                ) && 
                (
                    this.DismissalDate == input.DismissalDate ||
                    this.DismissalDate.Equals(input.DismissalDate)
                ) && 
                (
                    this.Priority == input.Priority ||
                    this.Priority.Equals(input.Priority)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Event.GetHashCode();
                if (this.EventUpdates != null)
                {
                    hashCode = (hashCode * 59) + this.EventUpdates.GetHashCode();
                }
                if (this.Contents != null)
                {
                    hashCode = (hashCode * 59) + this.Contents.GetHashCode();
                }
                if (this.Headings != null)
                {
                    hashCode = (hashCode * 59) + this.Headings.GetHashCode();
                }
                if (this.Sound != null)
                {
                    hashCode = (hashCode * 59) + this.Sound.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StaleDate.GetHashCode();
                hashCode = (hashCode * 59) + this.DismissalDate.GetHashCode();
                hashCode = (hashCode * 59) + this.Priority.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
