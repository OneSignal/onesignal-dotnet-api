/*
 * OneSignal
 *
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 5.0.1
 * Contact: devrel@onesignal.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OneSignalApi.Client.OpenAPIDateConverter;

namespace OneSignalApi.Model
{
    /// <summary>
    /// PropertiesObject
    /// </summary>
    [DataContract(Name = "PropertiesObject")]
    public partial class PropertiesObject : IEquatable<PropertiesObject>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropertiesObject" /> class.
        /// </summary>
        /// <param name="tags">tags.</param>
        /// <param name="language">language.</param>
        /// <param name="timezoneId">timezoneId.</param>
        /// <param name="lat">lat.</param>
        /// <param name="_long">_long.</param>
        /// <param name="country">country.</param>
        /// <param name="firstActive">firstActive.</param>
        /// <param name="lastActive">lastActive.</param>
        /// <param name="amountSpent">amountSpent.</param>
        /// <param name="purchases">purchases.</param>
        /// <param name="ip">ip.</param>
        public PropertiesObject(Dictionary<string, Object> tags = default(Dictionary<string, Object>), string language = default(string), string timezoneId = default(string), decimal lat = default(decimal), decimal _long = default(decimal), string country = default(string), int firstActive = default(int), int lastActive = default(int), decimal amountSpent = default(decimal), List<Purchase> purchases = default(List<Purchase>), string ip = default(string))
        {
            this.Tags = tags;
            this.Language = language;
            this.TimezoneId = timezoneId;
            this.Lat = lat;
            this.Long = _long;
            this.Country = country;
            this.FirstActive = firstActive;
            this.LastActive = lastActive;
            this.AmountSpent = amountSpent;
            this.Purchases = purchases;
            this.Ip = ip;
        }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public Dictionary<string, Object> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets TimezoneId
        /// </summary>
        [DataMember(Name = "timezone_id", EmitDefaultValue = false)]
        public string TimezoneId { get; set; }

        /// <summary>
        /// Gets or Sets Lat
        /// </summary>
        [DataMember(Name = "lat", EmitDefaultValue = false)]
        public decimal Lat { get; set; }

        /// <summary>
        /// Gets or Sets Long
        /// </summary>
        [DataMember(Name = "long", EmitDefaultValue = false)]
        public decimal Long { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets FirstActive
        /// </summary>
        [DataMember(Name = "first_active", EmitDefaultValue = false)]
        public int FirstActive { get; set; }

        /// <summary>
        /// Gets or Sets LastActive
        /// </summary>
        [DataMember(Name = "last_active", EmitDefaultValue = false)]
        public int LastActive { get; set; }

        /// <summary>
        /// Gets or Sets AmountSpent
        /// </summary>
        [DataMember(Name = "amount_spent", EmitDefaultValue = false)]
        public decimal AmountSpent { get; set; }

        /// <summary>
        /// Gets or Sets Purchases
        /// </summary>
        [DataMember(Name = "purchases", EmitDefaultValue = false)]
        public List<Purchase> Purchases { get; set; }

        /// <summary>
        /// Gets or Sets Ip
        /// </summary>
        [DataMember(Name = "ip", EmitDefaultValue = false)]
        public string Ip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PropertiesObject {\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  TimezoneId: ").Append(TimezoneId).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Long: ").Append(Long).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  FirstActive: ").Append(FirstActive).Append("\n");
            sb.Append("  LastActive: ").Append(LastActive).Append("\n");
            sb.Append("  AmountSpent: ").Append(AmountSpent).Append("\n");
            sb.Append("  Purchases: ").Append(Purchases).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropertiesObject);
        }

        /// <summary>
        /// Returns true if PropertiesObject instances are equal
        /// </summary>
        /// <param name="input">Instance of PropertiesObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropertiesObject input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.TimezoneId == input.TimezoneId ||
                    (this.TimezoneId != null &&
                    this.TimezoneId.Equals(input.TimezoneId))
                ) && 
                (
                    this.Lat == input.Lat ||
                    this.Lat.Equals(input.Lat)
                ) && 
                (
                    this.Long == input.Long ||
                    this.Long.Equals(input.Long)
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.FirstActive == input.FirstActive ||
                    this.FirstActive.Equals(input.FirstActive)
                ) && 
                (
                    this.LastActive == input.LastActive ||
                    this.LastActive.Equals(input.LastActive)
                ) && 
                (
                    this.AmountSpent == input.AmountSpent ||
                    this.AmountSpent.Equals(input.AmountSpent)
                ) && 
                (
                    this.Purchases == input.Purchases ||
                    this.Purchases != null &&
                    input.Purchases != null &&
                    this.Purchases.SequenceEqual(input.Purchases)
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.TimezoneId != null)
                {
                    hashCode = (hashCode * 59) + this.TimezoneId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Lat.GetHashCode();
                hashCode = (hashCode * 59) + this.Long.GetHashCode();
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FirstActive.GetHashCode();
                hashCode = (hashCode * 59) + this.LastActive.GetHashCode();
                hashCode = (hashCode * 59) + this.AmountSpent.GetHashCode();
                if (this.Purchases != null)
                {
                    hashCode = (hashCode * 59) + this.Purchases.GetHashCode();
                }
                if (this.Ip != null)
                {
                    hashCode = (hashCode * 59) + this.Ip.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
