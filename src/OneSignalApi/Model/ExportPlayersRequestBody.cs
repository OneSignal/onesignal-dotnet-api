/*
 * OneSignal
 *
 * A powerful way to send personalized messages at scale and build effective customer engagement strategies. Learn more at onesignal.com
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: devrel@onesignal.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = OneSignalApi.Client.OpenAPIDateConverter;

namespace OneSignalApi.Model
{
    /// <summary>
    /// ExportPlayersRequestBody
    /// </summary>
    [DataContract(Name = "export_players_request_body")]
    public partial class ExportPlayersRequestBody : IEquatable<ExportPlayersRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExportPlayersRequestBody" /> class.
        /// </summary>
        /// <param name="extraFields">Additional fields that you wish to include. Currently supports location, country, rooted, notification_types, ip, external_user_id, web_auth, and web_p256..</param>
        /// <param name="lastActiveSince">Export all devices with a last_active timestamp greater than this time.  Unixtime in seconds..</param>
        /// <param name="segmentName">Export all devices belonging to the segment..</param>
        public ExportPlayersRequestBody(List<string> extraFields = default(List<string>), string lastActiveSince = default(string), string segmentName = default(string))
        {
            this.ExtraFields = extraFields;
            this.LastActiveSince = lastActiveSince;
            this.SegmentName = segmentName;
        }

        /// <summary>
        /// Additional fields that you wish to include. Currently supports location, country, rooted, notification_types, ip, external_user_id, web_auth, and web_p256.
        /// </summary>
        /// <value>Additional fields that you wish to include. Currently supports location, country, rooted, notification_types, ip, external_user_id, web_auth, and web_p256.</value>
        [DataMember(Name = "extra_fields", EmitDefaultValue = false)]
        public List<string> ExtraFields { get; set; }

        /// <summary>
        /// Export all devices with a last_active timestamp greater than this time.  Unixtime in seconds.
        /// </summary>
        /// <value>Export all devices with a last_active timestamp greater than this time.  Unixtime in seconds.</value>
        [DataMember(Name = "last_active_since", EmitDefaultValue = false)]
        public string LastActiveSince { get; set; }

        /// <summary>
        /// Export all devices belonging to the segment.
        /// </summary>
        /// <value>Export all devices belonging to the segment.</value>
        [DataMember(Name = "segment_name", EmitDefaultValue = false)]
        public string SegmentName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExportPlayersRequestBody {\n");
            sb.Append("  ExtraFields: ").Append(ExtraFields).Append("\n");
            sb.Append("  LastActiveSince: ").Append(LastActiveSince).Append("\n");
            sb.Append("  SegmentName: ").Append(SegmentName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExportPlayersRequestBody);
        }

        /// <summary>
        /// Returns true if ExportPlayersRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ExportPlayersRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExportPlayersRequestBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExtraFields == input.ExtraFields ||
                    this.ExtraFields != null &&
                    input.ExtraFields != null &&
                    this.ExtraFields.SequenceEqual(input.ExtraFields)
                ) && 
                (
                    this.LastActiveSince == input.LastActiveSince ||
                    (this.LastActiveSince != null &&
                    this.LastActiveSince.Equals(input.LastActiveSince))
                ) && 
                (
                    this.SegmentName == input.SegmentName ||
                    (this.SegmentName != null &&
                    this.SegmentName.Equals(input.SegmentName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExtraFields != null)
                {
                    hashCode = (hashCode * 59) + this.ExtraFields.GetHashCode();
                }
                if (this.LastActiveSince != null)
                {
                    hashCode = (hashCode * 59) + this.LastActiveSince.GetHashCode();
                }
                if (this.SegmentName != null)
                {
                    hashCode = (hashCode * 59) + this.SegmentName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
